
Z8F0421_Dump.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080088e8  080088e8  000098e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089a0  080089a0  0000a1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089a0  080089a0  000099a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a8  080089a8  0000a1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089a8  080089a8  000099a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089ac  080089ac  000099ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080089b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001374  200001cc  08008b7c  0000a1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001540  08008b7c  0000a540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010360  00000000  00000000  0000a1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306d  00000000  00000000  0001a555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0001d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cb  00000000  00000000  0001e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b6c  00000000  00000000  0001ecb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b8b  00000000  00000000  0002381f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087636  00000000  00000000  000353aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc9e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  000bca24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c02d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080088d0 	.word	0x080088d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	080088d0 	.word	0x080088d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <delay_us>:

// HouseY2K: fym unprofessional? I'm hacking this chip on femboy outfits, I'm not a pentester in a meeting room
// HouseY2K: Let's all take fursuit pics for #FursuitFriday after we dump this shit right here

// === ChatGPT: DWT Microsecond Delay ===
void delay_us(uint32_t us) {
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000164:	4b0d      	ldr	r3, [pc, #52]	@ (800019c <delay_us+0x40>)
 8000166:	685b      	ldr	r3, [r3, #4]
 8000168:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 800016a:	4b0d      	ldr	r3, [pc, #52]	@ (80001a0 <delay_us+0x44>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a0d      	ldr	r2, [pc, #52]	@ (80001a4 <delay_us+0x48>)
 8000170:	fba2 2303 	umull	r2, r3, r2, r3
 8000174:	0c9a      	lsrs	r2, r3, #18
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	fb02 f303 	mul.w	r3, r2, r3
 800017c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 800017e:	bf00      	nop
 8000180:	4b06      	ldr	r3, [pc, #24]	@ (800019c <delay_us+0x40>)
 8000182:	685a      	ldr	r2, [r3, #4]
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	1ad3      	subs	r3, r2, r3
 8000188:	68ba      	ldr	r2, [r7, #8]
 800018a:	429a      	cmp	r2, r3
 800018c:	d8f8      	bhi.n	8000180 <delay_us+0x24>
}
 800018e:	bf00      	nop
 8000190:	bf00      	nop
 8000192:	3714      	adds	r7, #20
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	e0001000 	.word	0xe0001000
 80001a0:	20000000 	.word	0x20000000
 80001a4:	431bde83 	.word	0x431bde83

080001a8 <toggleXIN>:

// === ChatGPT: Toggle XIN clock ===
void toggleXIN() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(XIN_Port, XIN_Pin);
 80001ac:	2110      	movs	r1, #16
 80001ae:	4807      	ldr	r0, [pc, #28]	@ (80001cc <toggleXIN+0x24>)
 80001b0:	f000 fec1 	bl	8000f36 <HAL_GPIO_TogglePin>
    delay_us(2);  // ChatGPT: short delay for edge detect
 80001b4:	2002      	movs	r0, #2
 80001b6:	f7ff ffd1 	bl	800015c <delay_us>
    HAL_GPIO_TogglePin(XIN_Port, XIN_Pin);
 80001ba:	2110      	movs	r1, #16
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <toggleXIN+0x24>)
 80001be:	f000 feba 	bl	8000f36 <HAL_GPIO_TogglePin>
    delay_us(2);
 80001c2:	2002      	movs	r0, #2
 80001c4:	f7ff ffca 	bl	800015c <delay_us>
}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <setSelector>:

// === ChatGPT: Selector set ===
void setSelector(uint8_t sel) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SEL_Port, SEL_B0_Pin, (sel & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	461a      	mov	r2, r3
 80001e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001e8:	480f      	ldr	r0, [pc, #60]	@ (8000228 <setSelector+0x58>)
 80001ea:	f000 fe8c 	bl	8000f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEL_Port, SEL_B1_Pin, (sel & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	105b      	asrs	r3, r3, #1
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	f003 0301 	and.w	r3, r3, #1
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	461a      	mov	r2, r3
 80001fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000200:	4809      	ldr	r0, [pc, #36]	@ (8000228 <setSelector+0x58>)
 8000202:	f000 fe80 	bl	8000f06 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEL_Port, SEL_C0_Pin, (sel & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	109b      	asrs	r3, r3, #2
 800020a:	b2db      	uxtb	r3, r3
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	b2db      	uxtb	r3, r3
 8000212:	461a      	mov	r2, r3
 8000214:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000218:	4803      	ldr	r0, [pc, #12]	@ (8000228 <setSelector+0x58>)
 800021a:	f000 fe74 	bl	8000f06 <HAL_GPIO_WritePin>
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40010800 	.word	0x40010800

0800022c <setPortADirectionInput>:

// === ChatGPT: Port A I/O direction control ===
void setPortADirectionInput(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	463b      	mov	r3, r7
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = 0xFF; // ChatGPT: PA0-PA7
 800023e:	23ff      	movs	r3, #255	@ 0xff
 8000240:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(PORTA_Pins, &GPIO_InitStruct);
 800024a:	463b      	mov	r3, r7
 800024c:	4619      	mov	r1, r3
 800024e:	4803      	ldr	r0, [pc, #12]	@ (800025c <setPortADirectionInput+0x30>)
 8000250:	f000 fcbe 	bl	8000bd0 <HAL_GPIO_Init>
}
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40010800 	.word	0x40010800

08000260 <setPortADirectionOutput>:

void setPortADirectionOutput(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	463b      	mov	r3, r7
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = 0xFF; // ChatGPT: PA0-PA7
 8000272:	23ff      	movs	r3, #255	@ 0xff
 8000274:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027a:	2302      	movs	r3, #2
 800027c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PORTA_Pins, &GPIO_InitStruct);
 800027e:	463b      	mov	r3, r7
 8000280:	4619      	mov	r1, r3
 8000282:	4803      	ldr	r0, [pc, #12]	@ (8000290 <setPortADirectionOutput+0x30>)
 8000284:	f000 fca4 	bl	8000bd0 <HAL_GPIO_Init>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40010800 	.word	0x40010800

08000294 <writePortA>:

// === ChatGPT: Write to bus ===
void writePortA(uint8_t data) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
    setPortADirectionOutput();
 800029e:	f7ff ffdf 	bl	8000260 <setPortADirectionOutput>
    for (int i = 0; i < 8; i++) {
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	e013      	b.n	80002d0 <writePortA+0x3c>
        HAL_GPIO_WritePin(PORTA_Pins, (1 << i), (data & (1 << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	b299      	uxth	r1, r3
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	fa42 f303 	asr.w	r3, r2, r3
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	4807      	ldr	r0, [pc, #28]	@ (80002e4 <writePortA+0x50>)
 80002c6:	f000 fe1e 	bl	8000f06 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3301      	adds	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	2b07      	cmp	r3, #7
 80002d4:	dde8      	ble.n	80002a8 <writePortA+0x14>
    }
    toggleXIN();
 80002d6:	f7ff ff67 	bl	80001a8 <toggleXIN>
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010800 	.word	0x40010800

080002e8 <readPortA>:

// === ChatGPT: Read from bus ===
uint8_t readPortA(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
    setPortADirectionInput();
 80002ee:	f7ff ff9d 	bl	800022c <setPortADirectionInput>
    uint8_t val = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80002f6:	2300      	movs	r3, #0
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	e01b      	b.n	8000334 <readPortA+0x4c>
        val |= (HAL_GPIO_ReadPin(PORTA_Pins, (1 << i)) ? 1 : 0) << i;
 80002fc:	2201      	movs	r2, #1
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	fa02 f303 	lsl.w	r3, r2, r3
 8000304:	b29b      	uxth	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	480e      	ldr	r0, [pc, #56]	@ (8000344 <readPortA+0x5c>)
 800030a:	f000 fde5 	bl	8000ed8 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	bf14      	ite	ne
 8000314:	2301      	movne	r3, #1
 8000316:	2300      	moveq	r3, #0
 8000318:	b2db      	uxtb	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	b25a      	sxtb	r2, r3
 8000324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000328:	4313      	orrs	r3, r2
 800032a:	b25b      	sxtb	r3, r3
 800032c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	2b07      	cmp	r3, #7
 8000338:	dde0      	ble.n	80002fc <readPortA+0x14>
    }
    return val;
 800033a:	79fb      	ldrb	r3, [r7, #7]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40010800 	.word	0x40010800

08000348 <sendOCD>:

// === ChatGPT: Send OCD command ===
void sendOCD(uint8_t b) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &b, 1, HAL_MAX_DELAY);
 8000352:	1df9      	adds	r1, r7, #7
 8000354:	f04f 33ff 	mov.w	r3, #4294967295
 8000358:	2201      	movs	r2, #1
 800035a:	4805      	ldr	r0, [pc, #20]	@ (8000370 <sendOCD+0x28>)
 800035c:	f003 f882 	bl	8003464 <HAL_UART_Transmit>
    delay_us(100); // ChatGPT: Allow sync
 8000360:	2064      	movs	r0, #100	@ 0x64
 8000362:	f7ff fefb 	bl	800015c <delay_us>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200001e8 	.word	0x200001e8

08000374 <enterBypassMode>:

// === ChatGPT: Enter Flash Bypass Mode ===
void enterBypassMode() {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
    sendOCD(0x80); // ChatGPT: Autobaud
 8000378:	2080      	movs	r0, #128	@ 0x80
 800037a:	f7ff ffe5 	bl	8000348 <sendOCD>
    sendOCD(0xF0); // ChatGPT: Write Testmode
 800037e:	20f0      	movs	r0, #240	@ 0xf0
 8000380:	f7ff ffe2 	bl	8000348 <sendOCD>
    sendOCD(0x04); // ChatGPT: Enable bypass
 8000384:	2004      	movs	r0, #4
 8000386:	f7ff ffdf 	bl	8000348 <sendOCD>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}

0800038e <readByte>:

// === ChatGPT: Read byte from Flash ===
uint8_t readByte(uint16_t addr) {
 800038e:	b580      	push	{r7, lr}
 8000390:	b084      	sub	sp, #16
 8000392:	af00      	add	r7, sp, #0
 8000394:	4603      	mov	r3, r0
 8000396:	80fb      	strh	r3, [r7, #6]
    setSelector(0x00);  // ChatGPT: XADDR (hi)
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ff19 	bl	80001d0 <setSelector>
    writePortA(addr >> 8);
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	0a1b      	lsrs	r3, r3, #8
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff74 	bl	8000294 <writePortA>

    setSelector(0x01);  // ChatGPT: YADDR (lo)
 80003ac:	2001      	movs	r0, #1
 80003ae:	f7ff ff0f 	bl	80001d0 <setSelector>
    writePortA(addr & 0xFF);
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff6c 	bl	8000294 <writePortA>

    setSelector(0x03);  // ChatGPT: Control signals
 80003bc:	2003      	movs	r0, #3
 80003be:	f7ff ff07 	bl	80001d0 <setSelector>
    writePortA(0xF0);   // ChatGPT: XE | YE | SE | OE | TEST1
 80003c2:	20f0      	movs	r0, #240	@ 0xf0
 80003c4:	f7ff ff66 	bl	8000294 <writePortA>

    delay_us(1);        // ChatGPT: settle
 80003c8:	2001      	movs	r0, #1
 80003ca:	f7ff fec7 	bl	800015c <delay_us>
    setSelector(0x05);  // ChatGPT: DOUT
 80003ce:	2005      	movs	r0, #5
 80003d0:	f7ff fefe 	bl	80001d0 <setSelector>
    uint8_t val = readPortA();
 80003d4:	f7ff ff88 	bl	80002e8 <readPortA>
 80003d8:	4603      	mov	r3, r0
 80003da:	73fb      	strb	r3, [r7, #15]

    setSelector(0x03);
 80003dc:	2003      	movs	r0, #3
 80003de:	f7ff fef7 	bl	80001d0 <setSelector>
    writePortA(0x00);   // ChatGPT: clear control
 80003e2:	2000      	movs	r0, #0
 80003e4:	f7ff ff56 	bl	8000294 <writePortA>

    return val;
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <fwmain>:

// === ChatGPT: Main firmware logic ===
void fwmain(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08c      	sub	sp, #48	@ 0x30
 80003f8:	af02      	add	r7, sp, #8
    // ChatGPT: Enable DWT cycle counter for delay_us
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80003fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000478 <fwmain+0x84>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000478 <fwmain+0x84>)
 8000400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000404:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000406:	4b1d      	ldr	r3, [pc, #116]	@ (800047c <fwmain+0x88>)
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800040c:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <fwmain+0x88>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a1a      	ldr	r2, [pc, #104]	@ (800047c <fwmain+0x88>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]

    enterBypassMode();
 8000418:	f7ff ffac 	bl	8000374 <enterBypassMode>

    for (uint16_t addr = 0x0000; addr < 0x1000; addr++) {
 800041c:	2300      	movs	r3, #0
 800041e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000420:	e021      	b.n	8000466 <fwmain+0x72>
        uint8_t val = readByte(addr);
 8000422:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ffb2 	bl	800038e <readByte>
 800042a:	4603      	mov	r3, r0
 800042c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

        char msg[32];
        snprintf(msg, sizeof(msg), "%04X: %02X\r\n", addr, val);
 8000430:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000432:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000436:	1d38      	adds	r0, r7, #4
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	4613      	mov	r3, r2
 800043c:	4a10      	ldr	r2, [pc, #64]	@ (8000480 <fwmain+0x8c>)
 800043e:	2120      	movs	r1, #32
 8000440:	f007 fd82 	bl	8007f48 <sniprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe80 	bl	800014c <strlen>
 800044c:	4603      	mov	r3, r0
 800044e:	b29a      	uxth	r2, r3
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4611      	mov	r1, r2
 8000454:	4618      	mov	r0, r3
 8000456:	f007 f999 	bl	800778c <CDC_Transmit_FS>
        HAL_Delay(1);  // Optional: tiny delay to prevent USB overflow
 800045a:	2001      	movs	r0, #1
 800045c:	f000 fa86 	bl	800096c <HAL_Delay>
    for (uint16_t addr = 0x0000; addr < 0x1000; addr++) {
 8000460:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000462:	3301      	adds	r3, #1
 8000464:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000466:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800046c:	d3d9      	bcc.n	8000422 <fwmain+0x2e>
    }
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	3728      	adds	r7, #40	@ 0x28
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	e000edf0 	.word	0xe000edf0
 800047c:	e0001000 	.word	0xe0001000
 8000480:	080088e8 	.word	0x080088e8

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fa0e 	bl	80008a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f80a 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f88c 	bl	80005ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000494:	f000 f860 	bl	8000558 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000498:	f007 f8ba 	bl	8007610 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fwmain();
 800049c:	f7ff ffaa 	bl	80003f4 <fwmain>
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <main+0x1c>

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b094      	sub	sp, #80	@ 0x50
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ae:	2228      	movs	r2, #40	@ 0x28
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f007 fd7e 	bl	8007fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d4:	2301      	movs	r3, #1
 80004d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e2:	2301      	movs	r3, #1
 80004e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e6:	2302      	movs	r3, #2
 80004e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fa94 	bl	8002a28 <HAL_RCC_OscConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000506:	f000 f8bf 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050a:	230f      	movs	r3, #15
 800050c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050e:	2302      	movs	r3, #2
 8000510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2102      	movs	r1, #2
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fd00 	bl	8002f2c <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000532:	f000 f8a9 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000536:	2310      	movs	r3, #16
 8000538:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	4618      	mov	r0, r3
 8000542:	f002 fe81 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800054c:	f000 f89c 	bl	8000688 <Error_Handler>
  }
}
 8000550:	bf00      	nop
 8000552:	3750      	adds	r7, #80	@ 0x50
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 800055e:	4a12      	ldr	r2, [pc, #72]	@ (80005a8 <MX_USART3_UART_Init+0x50>)
 8000560:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 8000564:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000568:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 800057e:	220c      	movs	r2, #12
 8000580:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	@ (80005a4 <MX_USART3_UART_Init+0x4c>)
 8000590:	f002 ff10 	bl	80033b4 <HAL_HalfDuplex_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800059a:	f000 f875 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200001e8 	.word	0x200001e8
 80005a8:	40004800 	.word	0x40004800

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c0:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	4a2d      	ldr	r2, [pc, #180]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6193      	str	r3, [r2, #24]
 80005cc:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f003 0310 	and.w	r3, r3, #16
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0320 	and.w	r3, r3, #32
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a21      	ldr	r2, [pc, #132]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <MX_GPIO_Init+0xd0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <MX_GPIO_Init+0xd0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <MX_GPIO_Init+0xd0>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <MX_GPIO_Init+0xd0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000620:	2200      	movs	r2, #0
 8000622:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000626:	4816      	ldr	r0, [pc, #88]	@ (8000680 <MX_GPIO_Init+0xd4>)
 8000628:	f000 fc6d 	bl	8000f06 <HAL_GPIO_WritePin>
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin
                          |B0_Pin|B1_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TARGET_RESET_Pin|TARGET_CLK_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8000632:	4814      	ldr	r0, [pc, #80]	@ (8000684 <MX_GPIO_Init+0xd8>)
 8000634:	f000 fc67 	bl	8000f06 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin A6_Pin A7_Pin
                           B0_Pin B1_Pin C0_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000638:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800063c:	613b      	str	r3, [r7, #16]
                          |A4_Pin|A5_Pin|A6_Pin|A7_Pin
                          |B0_Pin|B1_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2302      	movs	r3, #2
 8000648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	4619      	mov	r1, r3
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <MX_GPIO_Init+0xd4>)
 8000652:	f000 fabd 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TARGET_RESET_Pin TARGET_CLK_Pin */
  GPIO_InitStruct.Pin = TARGET_RESET_Pin|TARGET_CLK_Pin;
 8000656:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 800065a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_GPIO_Init+0xd8>)
 8000670:	f000 faae 	bl	8000bd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800
 8000684:	40010c00 	.word	0x40010c00

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <Error_Handler+0x8>

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069a:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <HAL_MspInit+0x5c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <HAL_MspInit+0x5c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <HAL_MspInit+0x60>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	4a04      	ldr	r2, [pc, #16]	@ (80006f4 <HAL_MspInit+0x60>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010000 	.word	0x40010000

080006f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <HAL_UART_MspInit+0x74>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d124      	bne.n	8000762 <HAL_UART_MspInit+0x6a>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_UART_MspInit+0x78>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <HAL_UART_MspInit+0x78>)
 800071e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000722:	61d3      	str	r3, [r2, #28]
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_UART_MspInit+0x78>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <HAL_UART_MspInit+0x78>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <HAL_UART_MspInit+0x78>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <HAL_UART_MspInit+0x78>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = UART_DBG_Pin;
 8000748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800074c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074e:	2312      	movs	r3, #18
 8000750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(UART_DBG_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <HAL_UART_MspInit+0x7c>)
 800075e:	f000 fa37 	bl	8000bd0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40004800 	.word	0x40004800
 8000770:	40021000 	.word	0x40021000
 8000774:	40010c00 	.word	0x40010c00

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <MemManage_Handler+0x4>

08000790 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <UsageFault_Handler+0x4>

080007a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f8b4 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007d6:	f000 fce3 	bl	80011a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000f00 	.word	0x20000f00

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f007 fbd6 	bl	8007fc4 <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	220c      	movs	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <_sbrk+0x64>)
 8000834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20005000 	.word	0x20005000
 8000844:	00000400 	.word	0x00000400
 8000848:	20000230 	.word	0x20000230
 800084c:	20001540 	.word	0x20001540

08000850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff fff8 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000862:	490c      	ldr	r1, [pc, #48]	@ (8000894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000864:	4a0c      	ldr	r2, [pc, #48]	@ (8000898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000878:	4c09      	ldr	r4, [pc, #36]	@ (80008a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000886:	f007 fba3 	bl	8007fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fdfb 	bl	8000484 <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000898:	080089b0 	.word	0x080089b0
  ldr r2, =_sbss
 800089c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80008a0:	20001540 	.word	0x20001540

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f947 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fee6 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f95f 	bl	8000bb6 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f927 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	@ (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000008 	.word	0x20000008
 8000954:	20000234 	.word	0x20000234

08000958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20000234 	.word	0x20000234

0800096c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000974:	f7ff fff0 	bl	8000958 <HAL_GetTick>
 8000978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000984:	d005      	beq.n	8000992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_Delay+0x44>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000992:	bf00      	nop
 8000994:	f7ff ffe0 	bl	8000958 <HAL_GetTick>
 8000998:	4602      	mov	r2, r0
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d8f7      	bhi.n	8000994 <HAL_Delay+0x28>
  {
  }
}
 80009a4:	bf00      	nop
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4906      	ldr	r1, [pc, #24]	@ (8000a4c <__NVIC_EnableIRQ+0x34>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	@ (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	@ (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	@ 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff90 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff2d 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff42 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff35 	bl	8000a18 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffa2 	bl	8000b08 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b08b      	sub	sp, #44	@ 0x2c
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	e169      	b.n	8000eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be4:	2201      	movs	r2, #1
 8000be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	69fa      	ldr	r2, [r7, #28]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 8158 	bne.w	8000eb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a9a      	ldr	r2, [pc, #616]	@ (8000e70 <HAL_GPIO_Init+0x2a0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d05e      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c0c:	4a98      	ldr	r2, [pc, #608]	@ (8000e70 <HAL_GPIO_Init+0x2a0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d875      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c12:	4a98      	ldr	r2, [pc, #608]	@ (8000e74 <HAL_GPIO_Init+0x2a4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d058      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c18:	4a96      	ldr	r2, [pc, #600]	@ (8000e74 <HAL_GPIO_Init+0x2a4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d86f      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c1e:	4a96      	ldr	r2, [pc, #600]	@ (8000e78 <HAL_GPIO_Init+0x2a8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d052      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c24:	4a94      	ldr	r2, [pc, #592]	@ (8000e78 <HAL_GPIO_Init+0x2a8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d869      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c2a:	4a94      	ldr	r2, [pc, #592]	@ (8000e7c <HAL_GPIO_Init+0x2ac>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d04c      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c30:	4a92      	ldr	r2, [pc, #584]	@ (8000e7c <HAL_GPIO_Init+0x2ac>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d863      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c36:	4a92      	ldr	r2, [pc, #584]	@ (8000e80 <HAL_GPIO_Init+0x2b0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d046      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c3c:	4a90      	ldr	r2, [pc, #576]	@ (8000e80 <HAL_GPIO_Init+0x2b0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d85d      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d82a      	bhi.n	8000c9c <HAL_GPIO_Init+0xcc>
 8000c46:	2b12      	cmp	r3, #18
 8000c48:	d859      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <HAL_GPIO_Init+0x80>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000ccb 	.word	0x08000ccb
 8000c54:	08000ca5 	.word	0x08000ca5
 8000c58:	08000cb7 	.word	0x08000cb7
 8000c5c:	08000cf9 	.word	0x08000cf9
 8000c60:	08000cff 	.word	0x08000cff
 8000c64:	08000cff 	.word	0x08000cff
 8000c68:	08000cff 	.word	0x08000cff
 8000c6c:	08000cff 	.word	0x08000cff
 8000c70:	08000cff 	.word	0x08000cff
 8000c74:	08000cff 	.word	0x08000cff
 8000c78:	08000cff 	.word	0x08000cff
 8000c7c:	08000cff 	.word	0x08000cff
 8000c80:	08000cff 	.word	0x08000cff
 8000c84:	08000cff 	.word	0x08000cff
 8000c88:	08000cff 	.word	0x08000cff
 8000c8c:	08000cff 	.word	0x08000cff
 8000c90:	08000cff 	.word	0x08000cff
 8000c94:	08000cad 	.word	0x08000cad
 8000c98:	08000cc1 	.word	0x08000cc1
 8000c9c:	4a79      	ldr	r2, [pc, #484]	@ (8000e84 <HAL_GPIO_Init+0x2b4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ca2:	e02c      	b.n	8000cfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e029      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e024      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	3308      	adds	r3, #8
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e01f      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e01a      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e013      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69fa      	ldr	r2, [r7, #28]
 8000ce8:	611a      	str	r2, [r3, #16]
          break;
 8000cea:	e009      	b.n	8000d00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2308      	movs	r3, #8
 8000cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	615a      	str	r2, [r3, #20]
          break;
 8000cf6:	e003      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e000      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          break;
 8000cfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2bff      	cmp	r3, #255	@ 0xff
 8000d04:	d801      	bhi.n	8000d0a <HAL_GPIO_Init+0x13a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	e001      	b.n	8000d0e <HAL_GPIO_Init+0x13e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2bff      	cmp	r3, #255	@ 0xff
 8000d14:	d802      	bhi.n	8000d1c <HAL_GPIO_Init+0x14c>
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0x152>
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1e:	3b08      	subs	r3, #8
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	210f      	movs	r1, #15
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	6a39      	ldr	r1, [r7, #32]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 80b1 	beq.w	8000eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d50:	4b4d      	ldr	r3, [pc, #308]	@ (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a4c      	ldr	r2, [pc, #304]	@ (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d68:	4a48      	ldr	r2, [pc, #288]	@ (8000e8c <HAL_GPIO_Init+0x2bc>)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <HAL_GPIO_Init+0x2c0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d013      	beq.n	8000dbc <HAL_GPIO_Init+0x1ec>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3f      	ldr	r2, [pc, #252]	@ (8000e94 <HAL_GPIO_Init+0x2c4>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d00d      	beq.n	8000db8 <HAL_GPIO_Init+0x1e8>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e98 <HAL_GPIO_Init+0x2c8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d007      	beq.n	8000db4 <HAL_GPIO_Init+0x1e4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	@ (8000e9c <HAL_GPIO_Init+0x2cc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d101      	bne.n	8000db0 <HAL_GPIO_Init+0x1e0>
 8000dac:	2303      	movs	r3, #3
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dce:	492f      	ldr	r1, [pc, #188]	@ (8000e8c <HAL_GPIO_Init+0x2bc>)
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	492c      	ldr	r1, [pc, #176]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	608b      	str	r3, [r1, #8]
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4928      	ldr	r1, [pc, #160]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	4922      	ldr	r1, [pc, #136]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60cb      	str	r3, [r1, #12]
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	491e      	ldr	r1, [pc, #120]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4918      	ldr	r1, [pc, #96]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4914      	ldr	r1, [pc, #80]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d021      	beq.n	8000ea4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	490e      	ldr	r1, [pc, #56]	@ (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	e021      	b.n	8000eb2 <HAL_GPIO_Init+0x2e2>
 8000e6e:	bf00      	nop
 8000e70:	10320000 	.word	0x10320000
 8000e74:	10310000 	.word	0x10310000
 8000e78:	10220000 	.word	0x10220000
 8000e7c:	10210000 	.word	0x10210000
 8000e80:	10120000 	.word	0x10120000
 8000e84:	10110000 	.word	0x10110000
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	40011400 	.word	0x40011400
 8000ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4909      	ldr	r1, [pc, #36]	@ (8000ed4 <HAL_GPIO_Init+0x304>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f47f ae8e 	bne.w	8000be4 <HAL_GPIO_Init+0x14>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	372c      	adds	r7, #44	@ 0x2c
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	807b      	strh	r3, [r7, #2]
 8000f12:	4613      	mov	r3, r2
 8000f14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1c:	887a      	ldrh	r2, [r7, #2]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f22:	e003      	b.n	8000f2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	041a      	lsls	r2, r3, #16
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	611a      	str	r2, [r3, #16]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	400b      	ands	r3, r1
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0e8      	b.n	800114c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f006 fd30 	bl	80079f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2203      	movs	r2, #3
 8000f98:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fc53 	bl	8003852 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fb6:	f002 fc29 	bl	800380c <USB_CoreInit>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e0bf      	b.n	800114c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fc57 	bl	8003886 <USB_SetCurrentMode>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0b0      	b.n	800114c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e03e      	b.n	800106e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3311      	adds	r3, #17
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	3310      	adds	r3, #16
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	3313      	adds	r3, #19
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	3320      	adds	r3, #32
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3324      	adds	r3, #36	@ 0x24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	791b      	ldrb	r3, [r3, #4]
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	429a      	cmp	r2, r3
 8001076:	d3bb      	bcc.n	8000ff0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e044      	b.n	8001108 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	3301      	adds	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	791b      	ldrb	r3, [r3, #4]
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	429a      	cmp	r2, r3
 8001110:	d3b5      	bcc.n	800107e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3304      	adds	r3, #4
 800111a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111c:	f002 fbbf 	bl	800389e <USB_DevInit>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2202      	movs	r2, #2
 800112a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00c      	b.n	800114c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f004 fe3e 	bl	8005dc6 <USB_DevDisconnect>

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_PCD_Start+0x16>
 8001166:	2302      	movs	r3, #2
 8001168:	e016      	b.n	8001198 <HAL_PCD_Start+0x44>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fb55 	bl	8003826 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800117c:	2101      	movs	r1, #1
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f006 feab 	bl	8007eda <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fe12 	bl	8005db2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fe14 	bl	8005dda <USB_ReadInterrupts>
 80011b2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fb1a 	bl	80017f8 <PCD_EP_ISR_Handler>

    return;
 80011c4:	e119      	b.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011e2:	b292      	uxth	r2, r2
 80011e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f006 fc7e 	bl	8007aea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80011ee:	2100      	movs	r1, #0
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f905 	bl	8001400 <HAL_PCD_SetAddress>

    return;
 80011f6:	e100      	b.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00c      	beq.n	800121c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800120a:	b29a      	uxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001214:	b292      	uxth	r2, r2
 8001216:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800121a:	e0ee      	b.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00c      	beq.n	8001240 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001238:	b292      	uxth	r2, r2
 800123a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800123e:	e0dc      	b.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d027      	beq.n	800129a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0204 	bic.w	r2, r2, #4
 800125c:	b292      	uxth	r2, r2
 800125e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0208 	bic.w	r2, r2, #8
 8001274:	b292      	uxth	r2, r2
 8001276:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f006 fc6e 	bl	8007b5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001292:	b292      	uxth	r2, r2
 8001294:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001298:	e0af      	b.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 8083 	beq.w	80013ac <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	77fb      	strb	r3, [r7, #31]
 80012aa:	e010      	b.n	80012ce <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	441a      	add	r2, r3
 80012b8:	7ffb      	ldrb	r3, [r7, #31]
 80012ba:	8812      	ldrh	r2, [r2, #0]
 80012bc:	b292      	uxth	r2, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	3320      	adds	r3, #32
 80012c2:	443b      	add	r3, r7
 80012c4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80012c8:	7ffb      	ldrb	r3, [r7, #31]
 80012ca:	3301      	adds	r3, #1
 80012cc:	77fb      	strb	r3, [r7, #31]
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	d9eb      	bls.n	80012ac <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012dc:	b29a      	uxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	b292      	uxth	r2, r2
 80012e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	b292      	uxth	r2, r2
 8001300:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001304:	bf00      	nop
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800130e:	b29b      	uxth	r3, r3
 8001310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f6      	beq.n	8001306 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001320:	b29a      	uxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800132a:	b292      	uxth	r2, r2
 800132c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	77fb      	strb	r3, [r7, #31]
 8001334:	e00f      	b.n	8001356 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001336:	7ffb      	ldrb	r3, [r7, #31]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	4611      	mov	r1, r2
 800133e:	7ffa      	ldrb	r2, [r7, #31]
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	440a      	add	r2, r1
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	3320      	adds	r3, #32
 8001348:	443b      	add	r3, r7
 800134a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800134e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	3301      	adds	r3, #1
 8001354:	77fb      	strb	r3, [r7, #31]
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	2b07      	cmp	r3, #7
 800135a:	d9ec      	bls.n	8001336 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0208 	orr.w	r2, r2, #8
 800136e:	b292      	uxth	r2, r2
 8001370:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001386:	b292      	uxth	r2, r2
 8001388:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001394:	b29a      	uxth	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0204 	orr.w	r2, r2, #4
 800139e:	b292      	uxth	r2, r2
 80013a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f006 fbbf 	bl	8007b28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013aa:	e026      	b.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013be:	b29a      	uxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013c8:	b292      	uxth	r2, r2
 80013ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f006 fb7d 	bl	8007ace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013d4:	e011      	b.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00c      	beq.n	80013fa <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013f2:	b292      	uxth	r2, r2
 80013f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80013f8:	bf00      	nop
  }
}
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <HAL_PCD_SetAddress+0x1a>
 8001416:	2302      	movs	r3, #2
 8001418:	e012      	b.n	8001440 <HAL_PCD_SetAddress+0x40>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	78fa      	ldrb	r2, [r7, #3]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fcab 	bl	8005d8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	4608      	mov	r0, r1
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4603      	mov	r3, r0
 8001458:	70fb      	strb	r3, [r7, #3]
 800145a:	460b      	mov	r3, r1
 800145c:	803b      	strh	r3, [r7, #0]
 800145e:	4613      	mov	r3, r2
 8001460:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da0e      	bge.n	800148c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	f003 0207 	and.w	r2, r3, #7
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	3310      	adds	r3, #16
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	705a      	strb	r2, [r3, #1]
 800148a:	e00e      	b.n	80014aa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	f003 0207 	and.w	r2, r3, #7
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80014b6:	883a      	ldrh	r2, [r7, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	78ba      	ldrb	r2, [r7, #2]
 80014c0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014c2:	78bb      	ldrb	r3, [r7, #2]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d102      	bne.n	80014ce <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_PCD_EP_Open+0x94>
 80014d8:	2302      	movs	r3, #2
 80014da:	e00e      	b.n	80014fa <HAL_PCD_EP_Open+0xb2>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 f9f4 	bl	80038d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80014f8:	7afb      	ldrb	r3, [r7, #11]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800150e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001512:	2b00      	cmp	r3, #0
 8001514:	da0e      	bge.n	8001534 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	f003 0207 	and.w	r2, r3, #7
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	3310      	adds	r3, #16
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2201      	movs	r2, #1
 8001530:	705a      	strb	r2, [r3, #1]
 8001532:	e00e      	b.n	8001552 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	f003 0207 	and.w	r2, r3, #7
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	b2da      	uxtb	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_PCD_EP_Close+0x6a>
 8001568:	2302      	movs	r3, #2
 800156a:	e00e      	b.n	800158a <HAL_PCD_EP_Close+0x88>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fd6c 	bl	8004058 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	460b      	mov	r3, r1
 80015a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	f003 0207 	and.w	r2, r3, #7
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2200      	movs	r2, #0
 80015ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2200      	movs	r2, #0
 80015d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6979      	ldr	r1, [r7, #20]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 ff23 	bl	8004430 <USB_EPStartXfer>

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	f003 0207 	and.w	r2, r3, #7
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	460b      	mov	r3, r1
 8001630:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	f003 0207 	and.w	r2, r3, #7
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	3310      	adds	r3, #16
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2200      	movs	r2, #0
 8001666:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2201      	movs	r2, #1
 800166c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800166e:	7afb      	ldrb	r3, [r7, #11]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	b2da      	uxtb	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fed5 	bl	8004430 <USB_EPStartXfer>

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	7912      	ldrb	r2, [r2, #4]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e04c      	b.n	8001748 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da0e      	bge.n	80016d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	f003 0207 	and.w	r2, r3, #7
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	3310      	adds	r3, #16
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2201      	movs	r2, #1
 80016d0:	705a      	strb	r2, [r3, #1]
 80016d2:	e00c      	b.n	80016ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_PCD_EP_SetStall+0x7e>
 800170a:	2302      	movs	r3, #2
 800170c:	e01c      	b.n	8001748 <HAL_PCD_EP_SetStall+0xb8>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68f9      	ldr	r1, [r7, #12]
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fa38 	bl	8005b92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	2b00      	cmp	r3, #0
 800172a:	d108      	bne.n	800173e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001736:	4619      	mov	r1, r3
 8001738:	4610      	mov	r0, r2
 800173a:	f004 fb5d 	bl	8005df8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	7912      	ldrb	r2, [r2, #4]
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e040      	b.n	80017f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800176e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001772:	2b00      	cmp	r3, #0
 8001774:	da0e      	bge.n	8001794 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	f003 0207 	and.w	r2, r3, #7
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	3310      	adds	r3, #16
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	705a      	strb	r2, [r3, #1]
 8001792:	e00e      	b.n	80017b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0207 	and.w	r2, r3, #7
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_PCD_EP_ClrStall+0x82>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e00e      	b.n	80017f0 <HAL_PCD_EP_ClrStall+0xa0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68f9      	ldr	r1, [r7, #12]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fa26 	bl	8005c32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b096      	sub	sp, #88	@ 0x58
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001800:	e3bb      	b.n	8001f7a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800180a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800180e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800181c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 8175 	bne.w	8001b10 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001826:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	d14e      	bne.n	80018d0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b29b      	uxth	r3, r3
 800183a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800183e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001842:	81fb      	strh	r3, [r7, #14]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	89fb      	ldrh	r3, [r7, #14]
 800184a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800184e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001852:	b29b      	uxth	r3, r3
 8001854:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3310      	adds	r3, #16
 800185a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001864:	b29b      	uxth	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	3302      	adds	r3, #2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4413      	add	r3, r2
 800187a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001886:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	441a      	add	r2, r3
 8001892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001894:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001896:	2100      	movs	r1, #0
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f006 f8fe 	bl	8007a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7b5b      	ldrb	r3, [r3, #13]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8368 	beq.w	8001f7a <PCD_EP_ISR_Handler+0x782>
 80018aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 8363 	bne.w	8001f7a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7b5b      	ldrb	r3, [r3, #13]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	735a      	strb	r2, [r3, #13]
 80018ce:	e354      	b.n	8001f7a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018d6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80018e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80018e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d034      	beq.n	8001958 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	3306      	adds	r3, #6
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	4413      	add	r3, r2
 800190c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001918:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001926:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800192c:	b29b      	uxth	r3, r3
 800192e:	f004 fab4 	bl	8005e9a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29a      	uxth	r2, r3
 800193a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800193e:	4013      	ands	r3, r2
 8001940:	823b      	strh	r3, [r7, #16]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	8a3a      	ldrh	r2, [r7, #16]
 8001948:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800194c:	b292      	uxth	r2, r2
 800194e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f006 f875 	bl	8007a40 <HAL_PCD_SetupStageCallback>
 8001956:	e310      	b.n	8001f7a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001958:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800195c:	2b00      	cmp	r3, #0
 800195e:	f280 830c 	bge.w	8001f7a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b29a      	uxth	r2, r3
 800196a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800196e:	4013      	ands	r3, r2
 8001970:	83fb      	strh	r3, [r7, #30]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	8bfa      	ldrh	r2, [r7, #30]
 8001978:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800197c:	b292      	uxth	r2, r2
 800197e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001988:	b29b      	uxth	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	3306      	adds	r3, #6
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4413      	add	r3, r2
 800199e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d019      	beq.n	80019e8 <PCD_EP_ISR_Handler+0x1f0>
 80019b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c2:	6959      	ldr	r1, [r3, #20]
 80019c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f004 fa64 	bl	8005e9a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80019d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	441a      	add	r2, r3
 80019dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f006 f83e 	bl	8007a64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80019f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80019f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 82bd 	bne.w	8001f7a <PCD_EP_ISR_Handler+0x782>
 8001a00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001a04:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001a08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001a0c:	f000 82b5 	beq.w	8001f7a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4413      	add	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a46:	d91d      	bls.n	8001a84 <PCD_EP_ISR_Handler+0x28c>
 8001a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	095b      	lsrs	r3, r3, #5
 8001a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <PCD_EP_ISR_Handler+0x26a>
 8001a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	029b      	lsls	r3, r3, #10
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	e026      	b.n	8001ad2 <PCD_EP_ISR_Handler+0x2da>
 8001a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <PCD_EP_ISR_Handler+0x2aa>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	e017      	b.n	8001ad2 <PCD_EP_ISR_Handler+0x2da>
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <PCD_EP_ISR_Handler+0x2c4>
 8001ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab8:	3301      	adds	r3, #1
 8001aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	029b      	lsls	r3, r3, #10
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ae2:	827b      	strh	r3, [r7, #18]
 8001ae4:	8a7b      	ldrh	r3, [r7, #18]
 8001ae6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001aea:	827b      	strh	r3, [r7, #18]
 8001aec:	8a7b      	ldrh	r3, [r7, #18]
 8001aee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001af2:	827b      	strh	r3, [r7, #18]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	8a7b      	ldrh	r3, [r7, #18]
 8001afa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001afe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	8013      	strh	r3, [r2, #0]
 8001b0e:	e234      	b.n	8001f7a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b24:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f280 80fc 	bge.w	8001d26 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b44:	4013      	ands	r3, r2
 8001b46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001b5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b60:	b292      	uxth	r2, r2
 8001b62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b64:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7c:	7b1b      	ldrb	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d125      	bne.n	8001bce <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	3306      	adds	r3, #6
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001baa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001bae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8092 	beq.w	8001cdc <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbe:	6959      	ldr	r1, [r3, #20]
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc2:	88da      	ldrh	r2, [r3, #6]
 8001bc4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bc8:	f004 f967 	bl	8005e9a <USB_ReadPMA>
 8001bcc:	e086      	b.n	8001cdc <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd0:	78db      	ldrb	r3, [r3, #3]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d10a      	bne.n	8001bec <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001bd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f9d9 	bl	8001f96 <HAL_PCD_EP_DB_Receive>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001bea:	e077      	b.n	8001cdc <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c06:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	441a      	add	r2, r3
 8001c18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d024      	beq.n	8001c94 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c72:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02e      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c84:	6959      	ldr	r1, [r3, #20]
 8001c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c88:	891a      	ldrh	r2, [r3, #8]
 8001c8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c8e:	f004 f904 	bl	8005e9a <USB_ReadPMA>
 8001c92:	e023      	b.n	8001cdc <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3306      	adds	r3, #6
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cbc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001cc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d009      	beq.n	8001cdc <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cce:	6959      	ldr	r1, [r3, #20]
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd2:	895a      	ldrh	r2, [r3, #10]
 8001cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cd8:	f004 f8df 	bl	8005e9a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ce4:	441a      	add	r2, r3
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cf2:	441a      	add	r2, r3
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <PCD_EP_ISR_Handler+0x514>
 8001d00:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d206      	bcs.n	8001d1a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f005 fea6 	bl	8007a64 <HAL_PCD_DataOutStageCallback>
 8001d18:	e005      	b.n	8001d26 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fb85 	bl	8004430 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8123 	beq.w	8001f7a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d34:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	3310      	adds	r3, #16
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	441a      	add	r2, r3
 8001d74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d86:	78db      	ldrb	r3, [r3, #3]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f040 80a2 	bne.w	8001ed2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	7b1b      	ldrb	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8093 	beq.w	8001ec4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d046      	beq.n	8001e38 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d126      	bne.n	8001e00 <PCD_EP_ISR_Handler+0x608>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	4413      	add	r3, r2
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	011a      	lsls	r2, r3, #4
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001dd8:	623b      	str	r3, [r7, #32]
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	e061      	b.n	8001ec4 <PCD_EP_ISR_Handler+0x6cc>
 8001e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e02:	785b      	ldrb	r3, [r3, #1]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d15d      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x6cc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1c:	4413      	add	r3, r2
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	011a      	lsls	r2, r3, #4
 8001e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e28:	4413      	add	r3, r2
 8001e2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e32:	2200      	movs	r2, #0
 8001e34:	801a      	strh	r2, [r3, #0]
 8001e36:	e045      	b.n	8001ec4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d126      	bne.n	8001e94 <PCD_EP_ISR_Handler+0x69c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5a:	4413      	add	r3, r2
 8001e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	011a      	lsls	r2, r3, #4
 8001e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e66:	4413      	add	r3, r2
 8001e68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	e017      	b.n	8001ec4 <PCD_EP_ISR_Handler+0x6cc>
 8001e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e96:	785b      	ldrb	r3, [r3, #1]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d113      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x6cc>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eaa:	4413      	add	r3, r2
 8001eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	011a      	lsls	r2, r3, #4
 8001eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f005 fde5 	bl	8007a9a <HAL_PCD_DataInStageCallback>
 8001ed0:	e053      	b.n	8001f7a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ed2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d146      	bne.n	8001f6c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f06:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d907      	bls.n	8001f26 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f22:	619a      	str	r2, [r3, #24]
 8001f24:	e002      	b.n	8001f2c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d106      	bne.n	8001f42 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f005 fdad 	bl	8007a9a <HAL_PCD_DataInStageCallback>
 8001f40:	e01b      	b.n	8001f7a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f4a:	441a      	add	r2, r3
 8001f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f4e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001f58:	441a      	add	r2, r3
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f5c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f64:	4618      	mov	r0, r3
 8001f66:	f002 fa63 	bl	8004430 <USB_EPStartXfer>
 8001f6a:	e006      	b.n	8001f7a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f70:	461a      	mov	r2, r3
 8001f72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f91b 	bl	80021b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f6ff ac3b 	blt.w	8001802 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3758      	adds	r7, #88	@ 0x58
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b088      	sub	sp, #32
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d07e      	beq.n	80020ac <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	8b7b      	ldrh	r3, [r7, #26]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d306      	bcc.n	8001ff0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	8b7b      	ldrh	r3, [r7, #26]
 8001fe8:	1ad2      	subs	r2, r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	619a      	str	r2, [r3, #24]
 8001fee:	e002      	b.n	8001ff6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d123      	bne.n	8002046 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002018:	833b      	strh	r3, [r7, #24]
 800201a:	8b3b      	ldrh	r3, [r7, #24]
 800201c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002020:	833b      	strh	r3, [r7, #24]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	441a      	add	r2, r3
 8002030:	8b3b      	ldrh	r3, [r7, #24]
 8002032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800203a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800203e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002042:	b29b      	uxth	r3, r3
 8002044:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01f      	beq.n	8002090 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206a:	82fb      	strh	r3, [r7, #22]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	8afb      	ldrh	r3, [r7, #22]
 800207c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002088:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800208c:	b29b      	uxth	r3, r3
 800208e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002090:	8b7b      	ldrh	r3, [r7, #26]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8087 	beq.w	80021a6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6959      	ldr	r1, [r3, #20]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	891a      	ldrh	r2, [r3, #8]
 80020a4:	8b7b      	ldrh	r3, [r7, #26]
 80020a6:	f003 fef8 	bl	8005e9a <USB_ReadPMA>
 80020aa:	e07c      	b.n	80021a6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	3306      	adds	r3, #6
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	8b7b      	ldrh	r3, [r7, #26]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d306      	bcc.n	80020ee <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	8b7b      	ldrh	r3, [r7, #26]
 80020e6:	1ad2      	subs	r2, r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	619a      	str	r2, [r3, #24]
 80020ec:	e002      	b.n	80020f4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d123      	bne.n	8002144 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002116:	83fb      	strh	r3, [r7, #30]
 8002118:	8bfb      	ldrh	r3, [r7, #30]
 800211a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800211e:	83fb      	strh	r3, [r7, #30]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	441a      	add	r2, r3
 800212e:	8bfb      	ldrh	r3, [r7, #30]
 8002130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800213c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002140:	b29b      	uxth	r3, r3
 8002142:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002168:	83bb      	strh	r3, [r7, #28]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	8bbb      	ldrh	r3, [r7, #28]
 800217a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800217e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002186:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800218a:	b29b      	uxth	r3, r3
 800218c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800218e:	8b7b      	ldrh	r3, [r7, #26]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6959      	ldr	r1, [r3, #20]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	895a      	ldrh	r2, [r3, #10]
 80021a0:	8b7b      	ldrh	r3, [r7, #26]
 80021a2:	f003 fe7a 	bl	8005e9a <USB_ReadPMA>
    }
  }

  return count;
 80021a6:	8b7b      	ldrh	r3, [r7, #26]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0a4      	sub	sp, #144	@ 0x90
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 81dd 	beq.w	8002584 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	3302      	adds	r3, #2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80021fe:	429a      	cmp	r2, r3
 8002200:	d907      	bls.n	8002212 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800220a:	1ad2      	subs	r2, r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	619a      	str	r2, [r3, #24]
 8002210:	e002      	b.n	8002218 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 80b9 	bne.w	8002394 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d126      	bne.n	8002278 <HAL_PCD_EP_DB_Transmit+0xc8>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223e:	4413      	add	r3, r2
 8002240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	011a      	lsls	r2, r3, #4
 8002248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800224a:	4413      	add	r3, r2
 800224c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225c:	b29a      	uxth	r2, r3
 800225e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002260:	801a      	strh	r2, [r3, #0]
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002270:	b29a      	uxth	r2, r3
 8002272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002274:	801a      	strh	r2, [r3, #0]
 8002276:	e01a      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0xfe>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d116      	bne.n	80022ae <HAL_PCD_EP_DB_Transmit+0xfe>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002294:	4413      	add	r3, r2
 8002296:	637b      	str	r3, [r7, #52]	@ 0x34
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	011a      	lsls	r2, r3, #4
 800229e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a0:	4413      	add	r3, r2
 80022a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	2200      	movs	r2, #0
 80022ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d126      	bne.n	800230a <HAL_PCD_EP_DB_Transmit+0x15a>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	011a      	lsls	r2, r3, #4
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	801a      	strh	r2, [r3, #0]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002302:	b29a      	uxth	r2, r3
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	e017      	b.n	800233a <HAL_PCD_EP_DB_Transmit+0x18a>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	785b      	ldrb	r3, [r3, #1]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d113      	bne.n	800233a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	4413      	add	r3, r2
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	011a      	lsls	r2, r3, #4
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	4413      	add	r3, r2
 800232e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002332:	623b      	str	r3, [r7, #32]
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2200      	movs	r2, #0
 8002338:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f005 fbaa 	bl	8007a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 82fc 	beq.w	800294a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236c:	82fb      	strh	r3, [r7, #22]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	441a      	add	r2, r3
 800237c:	8afb      	ldrh	r3, [r7, #22]
 800237e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800238a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800238e:	b29b      	uxth	r3, r3
 8002390:	8013      	strh	r3, [r2, #0]
 8002392:	e2da      	b.n	800294a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d021      	beq.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80023ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80023d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80023d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f040 82ae 	bne.w	800294a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023f6:	441a      	add	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002404:	441a      	add	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d30b      	bcc.n	800242e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002426:	1ad2      	subs	r2, r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	621a      	str	r2, [r3, #32]
 800242c:	e017      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002436:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002446:	e00a      	b.n	800245e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d165      	bne.n	8002532 <HAL_PCD_EP_DB_Transmit+0x382>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800247a:	4413      	add	r3, r2
 800247c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	011a      	lsls	r2, r3, #4
 8002484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002486:	4413      	add	r3, r2
 8002488:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002498:	b29a      	uxth	r2, r3
 800249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80024a4:	d91d      	bls.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x332>
 80024a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x310>
 80024ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024bc:	3b01      	subs	r3, #1
 80024be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024da:	b29a      	uxth	r2, r3
 80024dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	e044      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <HAL_PCD_EP_DB_Transmit+0x350>
 80024ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e035      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002516:	3301      	adds	r3, #1
 8002518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800251a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b29a      	uxth	r2, r3
 8002520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002522:	b29b      	uxth	r3, r3
 8002524:	029b      	lsls	r3, r3, #10
 8002526:	b29b      	uxth	r3, r3
 8002528:	4313      	orrs	r3, r2
 800252a:	b29a      	uxth	r2, r3
 800252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	e01c      	b.n	800256c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d118      	bne.n	800256c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002548:	b29b      	uxth	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800254e:	4413      	add	r3, r2
 8002550:	647b      	str	r3, [r7, #68]	@ 0x44
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	011a      	lsls	r2, r3, #4
 8002558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800255a:	4413      	add	r3, r2
 800255c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002560:	643b      	str	r3, [r7, #64]	@ 0x40
 8002562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002566:	b29a      	uxth	r2, r3
 8002568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800256a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	891a      	ldrh	r2, [r3, #8]
 8002578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257c:	b29b      	uxth	r3, r3
 800257e:	f003 fc46 	bl	8005e0e <USB_WritePMA>
 8002582:	e1e2      	b.n	800294a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800258c:	b29b      	uxth	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	3306      	adds	r3, #6
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ac:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d307      	bcc.n	80025cc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80025c4:	1ad2      	subs	r2, r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	619a      	str	r2, [r3, #24]
 80025ca:	e002      	b.n	80025d2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 80c0 	bne.w	800275c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	785b      	ldrb	r3, [r3, #1]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d126      	bne.n	8002632 <HAL_PCD_EP_DB_Transmit+0x482>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025f8:	4413      	add	r3, r2
 80025fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	011a      	lsls	r2, r3, #4
 8002602:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002604:	4413      	add	r3, r2
 8002606:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800260a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800260c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002616:	b29a      	uxth	r2, r3
 8002618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800261a:	801a      	strh	r2, [r3, #0]
 800261c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262a:	b29a      	uxth	r2, r3
 800262c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800262e:	801a      	strh	r2, [r3, #0]
 8002630:	e01a      	b.n	8002668 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d116      	bne.n	8002668 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800264e:	4413      	add	r3, r2
 8002650:	667b      	str	r3, [r7, #100]	@ 0x64
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	011a      	lsls	r2, r3, #4
 8002658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800265a:	4413      	add	r3, r2
 800265c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002660:	663b      	str	r3, [r7, #96]	@ 0x60
 8002662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002664:	2200      	movs	r2, #0
 8002666:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	677b      	str	r3, [r7, #116]	@ 0x74
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d12b      	bne.n	80026ce <HAL_PCD_EP_DB_Transmit+0x51e>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800268a:	4413      	add	r3, r2
 800268c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	011a      	lsls	r2, r3, #4
 8002694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002696:	4413      	add	r3, r2
 8002698:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800269c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026ca:	801a      	strh	r2, [r3, #0]
 80026cc:	e017      	b.n	80026fe <HAL_PCD_EP_DB_Transmit+0x54e>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d113      	bne.n	80026fe <HAL_PCD_EP_DB_Transmit+0x54e>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026e4:	4413      	add	r3, r2
 80026e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	011a      	lsls	r2, r3, #4
 80026ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026f0:	4413      	add	r3, r2
 80026f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80026f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f005 f9c8 	bl	8007a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f040 811a 	bne.w	800294a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800272c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002730:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800274a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800274e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002756:	b29b      	uxth	r3, r3
 8002758:	8013      	strh	r3, [r2, #0]
 800275a:	e0f6      	b.n	800294a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d121      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800277c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002780:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	441a      	add	r2, r3
 8002792:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800279a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800279e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 80ca 	bne.w	800294a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027be:	441a      	add	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80027cc:	441a      	add	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6a1a      	ldr	r2, [r3, #32]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d30b      	bcc.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	621a      	str	r2, [r3, #32]
 80027f4:	e017      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80027fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800280e:	e00a      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2200      	movs	r2, #0
 800281c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	657b      	str	r3, [r7, #84]	@ 0x54
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	785b      	ldrb	r3, [r3, #1]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d165      	bne.n	8002900 <HAL_PCD_EP_DB_Transmit+0x750>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002848:	4413      	add	r3, r2
 800284a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	011a      	lsls	r2, r3, #4
 8002852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002854:	4413      	add	r3, r2
 8002856:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800285a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800285c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002866:	b29a      	uxth	r2, r3
 8002868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002870:	2b3e      	cmp	r3, #62	@ 0x3e
 8002872:	d91d      	bls.n	80028b0 <HAL_PCD_EP_DB_Transmit+0x700>
 8002874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800287c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800288a:	3b01      	subs	r3, #1
 800288c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800288e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29a      	uxth	r2, r3
 8002894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002896:	b29b      	uxth	r3, r3
 8002898:	029b      	lsls	r3, r3, #10
 800289a:	b29b      	uxth	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	e041      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x784>
 80028b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x71e>
 80028b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	e032      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x784>
 80028ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x738>
 80028e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028e4:	3301      	adds	r3, #1
 80028e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	029b      	lsls	r3, r3, #10
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	e019      	b.n	8002934 <HAL_PCD_EP_DB_Transmit+0x784>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d115      	bne.n	8002934 <HAL_PCD_EP_DB_Transmit+0x784>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002916:	4413      	add	r3, r2
 8002918:	657b      	str	r3, [r7, #84]	@ 0x54
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	011a      	lsls	r2, r3, #4
 8002920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002922:	4413      	add	r3, r2
 8002924:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002928:	653b      	str	r3, [r7, #80]	@ 0x50
 800292a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800292e:	b29a      	uxth	r2, r3
 8002930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002932:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	6959      	ldr	r1, [r3, #20]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	895a      	ldrh	r2, [r3, #10]
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002944:	b29b      	uxth	r3, r3
 8002946:	f003 fa62 	bl	8005e0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002964:	82bb      	strh	r3, [r7, #20]
 8002966:	8abb      	ldrh	r3, [r7, #20]
 8002968:	f083 0310 	eor.w	r3, r3, #16
 800296c:	82bb      	strh	r3, [r7, #20]
 800296e:	8abb      	ldrh	r3, [r7, #20]
 8002970:	f083 0320 	eor.w	r3, r3, #32
 8002974:	82bb      	strh	r3, [r7, #20]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	8abb      	ldrh	r3, [r7, #20]
 8002986:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800298a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800298e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002996:	b29b      	uxth	r3, r3
 8002998:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3790      	adds	r7, #144	@ 0x90
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	817b      	strh	r3, [r7, #10]
 80029b2:	4613      	mov	r3, r2
 80029b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	f003 0207 	and.w	r2, r3, #7
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	3310      	adds	r3, #16
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e009      	b.n	80029ee <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029da:	897a      	ldrh	r2, [r7, #10]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029ee:	893b      	ldrh	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2200      	movs	r2, #0
 80029f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	80da      	strh	r2, [r3, #6]
 8002a02:	e00b      	b.n	8002a1c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2201      	movs	r2, #1
 8002a08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e272      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8087 	beq.w	8002b56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a48:	4b92      	ldr	r3, [pc, #584]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d00c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a54:	4b8f      	ldr	r3, [pc, #572]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d112      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5e>
 8002a60:	4b8c      	ldr	r3, [pc, #560]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6c:	d10b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6e:	4b89      	ldr	r3, [pc, #548]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d06c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x12c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d168      	bne.n	8002b54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e24c      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x76>
 8002a90:	4b80      	ldr	r3, [pc, #512]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a7f      	ldr	r2, [pc, #508]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e02e      	b.n	8002afc <HAL_RCC_OscConfig+0xd4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7a      	ldr	r2, [pc, #488]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b78      	ldr	r3, [pc, #480]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a77      	ldr	r2, [pc, #476]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xd4>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xbc>
 8002aca:	4b72      	ldr	r3, [pc, #456]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a71      	ldr	r2, [pc, #452]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a6e      	ldr	r2, [pc, #440]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xd4>
 8002ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b68      	ldr	r3, [pc, #416]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a67      	ldr	r2, [pc, #412]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fd ff28 	bl	8000958 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fd ff24 	bl	8000958 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	@ 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e200      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xe4>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fd ff14 	bl	8000958 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fd ff10 	bl	8000958 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1ec      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x10c>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b62:	4b4c      	ldr	r3, [pc, #304]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b6e:	4b49      	ldr	r3, [pc, #292]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x18c>
 8002b7a:	4b46      	ldr	r3, [pc, #280]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b43      	ldr	r3, [pc, #268]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x176>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1c0      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4939      	ldr	r1, [pc, #228]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e03a      	b.n	8002c2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fd fec9 	bl	8000958 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7fd fec5 	bl	8000958 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1a1      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4927      	ldr	r1, [pc, #156]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <HAL_RCC_OscConfig+0x270>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c04:	f7fd fea8 	bl	8000958 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fd fea4 	bl	8000958 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e180      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03a      	beq.n	8002cac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d019      	beq.n	8002c72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b17      	ldr	r3, [pc, #92]	@ (8002c9c <HAL_RCC_OscConfig+0x274>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c44:	f7fd fe88 	bl	8000958 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7fd fe84 	bl	8000958 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e160      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f000 face 	bl	800320c <RCC_Delay>
 8002c70:	e01c      	b.n	8002cac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <HAL_RCC_OscConfig+0x274>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c78:	f7fd fe6e 	bl	8000958 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7e:	e00f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7fd fe6a 	bl	8000958 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d908      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e146      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	42420000 	.word	0x42420000
 8002c9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b92      	ldr	r3, [pc, #584]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e9      	bne.n	8002c80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a6 	beq.w	8002e06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10d      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4a87      	ldr	r2, [pc, #540]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	61d3      	str	r3, [r2, #28]
 8002cd6:	4b85      	ldr	r3, [pc, #532]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b82      	ldr	r3, [pc, #520]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c8>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fd fe2b 	bl	8000958 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fd fe27 	bl	8000958 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	@ 0x64
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e103      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b75      	ldr	r3, [pc, #468]	@ (8002ef0 <HAL_RCC_OscConfig+0x4c8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x312>
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4a6e      	ldr	r2, [pc, #440]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6213      	str	r3, [r2, #32]
 8002d38:	e02d      	b.n	8002d96 <HAL_RCC_OscConfig+0x36e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x334>
 8002d42:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	4a69      	ldr	r2, [pc, #420]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6213      	str	r3, [r2, #32]
 8002d4e:	4b67      	ldr	r3, [pc, #412]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a66      	ldr	r2, [pc, #408]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	e01c      	b.n	8002d96 <HAL_RCC_OscConfig+0x36e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCC_OscConfig+0x356>
 8002d64:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a60      	ldr	r2, [pc, #384]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6213      	str	r3, [r2, #32]
 8002d70:	4b5e      	ldr	r3, [pc, #376]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a5d      	ldr	r2, [pc, #372]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6213      	str	r3, [r2, #32]
 8002d7c:	e00b      	b.n	8002d96 <HAL_RCC_OscConfig+0x36e>
 8002d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a5a      	ldr	r2, [pc, #360]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	4b58      	ldr	r3, [pc, #352]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a57      	ldr	r2, [pc, #348]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d015      	beq.n	8002dca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9e:	f7fd fddb 	bl	8000958 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fd fdd7 	bl	8000958 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0b1      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ee      	beq.n	8002da6 <HAL_RCC_OscConfig+0x37e>
 8002dc8:	e014      	b.n	8002df4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7fd fdc5 	bl	8000958 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fd fdc1 	bl	8000958 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e09b      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4a3b      	ldr	r2, [pc, #236]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8087 	beq.w	8002f1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e10:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d061      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d146      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e24:	4b33      	ldr	r3, [pc, #204]	@ (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7fd fd95 	bl	8000958 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e32:	f7fd fd91 	bl	8000958 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e06d      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e58:	d108      	bne.n	8002e6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4921      	ldr	r1, [pc, #132]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a19      	ldr	r1, [r3, #32]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	491b      	ldr	r1, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fd fd65 	bl	8000958 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fd fd61 	bl	8000958 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e03d      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x46a>
 8002eb0:	e035      	b.n	8002f1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fd fd4e 	bl	8000958 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7fd fd4a 	bl	8000958 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e026      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x498>
 8002ede:	e01e      	b.n	8002f1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e019      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <HAL_RCC_OscConfig+0x500>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0d0      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b6a      	ldr	r3, [pc, #424]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d910      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b67      	ldr	r3, [pc, #412]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4965      	ldr	r1, [pc, #404]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f88:	4b59      	ldr	r3, [pc, #356]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a58      	ldr	r2, [pc, #352]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002faa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b50      	ldr	r3, [pc, #320]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	494d      	ldr	r1, [pc, #308]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d040      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b41      	ldr	r3, [pc, #260]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e073      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06b      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b39      	ldr	r3, [pc, #228]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4936      	ldr	r1, [pc, #216]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fd fc9c 	bl	8000958 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fd fc98 	bl	8000958 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e053      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2d      	ldr	r3, [pc, #180]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d210      	bcs.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b24      	ldr	r3, [pc, #144]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4922      	ldr	r1, [pc, #136]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e032      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4916      	ldr	r1, [pc, #88]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a6:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490e      	ldr	r1, [pc, #56]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f821 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490a      	ldr	r1, [pc, #40]	@ (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <HAL_RCC_ClockConfig+0x1cc>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d6:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <HAL_RCC_ClockConfig+0x1d0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fbfa 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08008940 	.word	0x08008940
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004

08003100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800311a:	4b1e      	ldr	r3, [pc, #120]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x94>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b04      	cmp	r3, #4
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x30>
 800312a:	2b08      	cmp	r3, #8
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x36>
 800312e:	e027      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003130:	4b19      	ldr	r3, [pc, #100]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x98>)
 8003132:	613b      	str	r3, [r7, #16]
      break;
 8003134:	e027      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0c9b      	lsrs	r3, r3, #18
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a17      	ldr	r2, [pc, #92]	@ (800319c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d010      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314e:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x94>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	0c5b      	lsrs	r3, r3, #17
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	4a11      	ldr	r2, [pc, #68]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0d      	ldr	r2, [pc, #52]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	fb03 f202 	mul.w	r2, r3, r2
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e004      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a0c      	ldr	r2, [pc, #48]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	613b      	str	r3, [r7, #16]
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x98>)
 8003182:	613b      	str	r3, [r7, #16]
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	693b      	ldr	r3, [r7, #16]
}
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	007a1200 	.word	0x007a1200
 800319c:	08008958 	.word	0x08008958
 80031a0:	08008968 	.word	0x08008968
 80031a4:	003d0900 	.word	0x003d0900

080031a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b02      	ldr	r3, [pc, #8]	@ (80031b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff2 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4903      	ldr	r1, [pc, #12]	@ (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08008950 	.word	0x08008950

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e8:	f7ff ffde 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	0adb      	lsrs	r3, r3, #11
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4903      	ldr	r1, [pc, #12]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	08008950 	.word	0x08008950

0800320c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <RCC_Delay+0x34>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <RCC_Delay+0x38>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	0a5b      	lsrs	r3, r3, #9
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003228:	bf00      	nop
  }
  while (Delay --);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e5a      	subs	r2, r3, #1
 800322e:	60fa      	str	r2, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f9      	bne.n	8003228 <RCC_Delay+0x1c>
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	20000000 	.word	0x20000000
 8003244:	10624dd3 	.word	0x10624dd3

08003248 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d07d      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003268:	4b4f      	ldr	r3, [pc, #316]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10d      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4b4c      	ldr	r3, [pc, #304]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327e:	61d3      	str	r3, [r2, #28]
 8003280:	4b49      	ldr	r3, [pc, #292]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b46      	ldr	r3, [pc, #280]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d118      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329c:	4b43      	ldr	r3, [pc, #268]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a42      	ldr	r2, [pc, #264]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a8:	f7fd fb56 	bl	8000958 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	e008      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fd fb52 	bl	8000958 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	@ 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e06d      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b3a      	ldr	r3, [pc, #232]	@ (80033ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ce:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d02e      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d027      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ec:	4b2e      	ldr	r3, [pc, #184]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f6:	4b2e      	ldr	r3, [pc, #184]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032fc:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003302:	4a29      	ldr	r2, [pc, #164]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d014      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fd fb21 	bl	8000958 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fd fb1d 	bl	8000958 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e036      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800333c:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4917      	ldr	r1, [pc, #92]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	4313      	orrs	r3, r2
 800334c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800336c:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	490b      	ldr	r1, [pc, #44]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	4904      	ldr	r1, [pc, #16]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
 80033b0:	42420440 	.word	0x42420440

080033b4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e04a      	b.n	800345c <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd f98c 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	@ 0x24
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f979 	bl	80036f0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800340c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800341c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0208 	orr.w	r2, r2, #8
 800342c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800343c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	@ 0x28
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	d175      	bne.n	8003570 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UART_Transmit+0x2c>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e06e      	b.n	8003572 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2221      	movs	r2, #33	@ 0x21
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034a2:	f7fd fa59 	bl	8000958 <HAL_GetTick>
 80034a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	88fa      	ldrh	r2, [r7, #6]
 80034b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034bc:	d108      	bne.n	80034d0 <HAL_UART_Transmit+0x6c>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e003      	b.n	80034d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034d8:	e02e      	b.n	8003538 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	@ 0x80
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f848 	bl	800357a <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e03a      	b.n	8003572 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003510:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	3302      	adds	r3, #2
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e007      	b.n	800352a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	3301      	adds	r3, #1
 8003528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1cb      	bne.n	80034da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	2140      	movs	r1, #64	@ 0x40
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f814 	bl	800357a <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e006      	b.n	8003572 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	e03b      	b.n	8003604 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003592:	d037      	beq.n	8003604 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003594:	f7fd f9e0 	bl	8000958 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	6a3a      	ldr	r2, [r7, #32]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <UART_WaitOnFlagUntilTimeout+0x30>
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e03a      	b.n	8003624 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d023      	beq.n	8003604 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d020      	beq.n	8003604 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b40      	cmp	r3, #64	@ 0x40
 80035c6:	d01d      	beq.n	8003604 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d116      	bne.n	8003604 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f81d 	bl	800362c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2208      	movs	r2, #8
 80035f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e00f      	b.n	8003624 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	429a      	cmp	r2, r3
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	429a      	cmp	r2, r3
 8003620:	d0b4      	beq.n	800358c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b095      	sub	sp, #84	@ 0x54
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800364a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003654:	643a      	str	r2, [r7, #64]	@ 0x40
 8003656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800365a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	61fb      	str	r3, [r7, #28]
   return(result);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003688:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800368e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d119      	bne.n	80036d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036c4:	61ba      	str	r2, [r7, #24]
 80036c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6979      	ldr	r1, [r7, #20]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	613b      	str	r3, [r7, #16]
   return(result);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036e6:	bf00      	nop
 80036e8:	3754      	adds	r7, #84	@ 0x54
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800372a:	f023 030c 	bic.w	r3, r3, #12
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	430b      	orrs	r3, r1
 8003736:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2c      	ldr	r2, [pc, #176]	@ (8003804 <UART_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d103      	bne.n	8003760 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7ff fd44 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	e002      	b.n	8003766 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003760:	f7ff fd2c 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8003764:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009a      	lsls	r2, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	4a22      	ldr	r2, [pc, #136]	@ (8003808 <UART_SetConfig+0x118>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	0119      	lsls	r1, r3, #4
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009a      	lsls	r2, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fbb2 f2f3 	udiv	r2, r2, r3
 800379c:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <UART_SetConfig+0x118>)
 800379e:	fba3 0302 	umull	r0, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2064      	movs	r0, #100	@ 0x64
 80037a6:	fb00 f303 	mul.w	r3, r0, r3
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	3332      	adds	r3, #50	@ 0x32
 80037b0:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <UART_SetConfig+0x118>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037bc:	4419      	add	r1, r3
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009a      	lsls	r2, r3, #2
 80037c8:	441a      	add	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <UART_SetConfig+0x118>)
 80037d6:	fba3 0302 	umull	r0, r3, r3, r2
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2064      	movs	r0, #100	@ 0x64
 80037de:	fb00 f303 	mul.w	r3, r0, r3
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	3332      	adds	r3, #50	@ 0x32
 80037e8:	4a07      	ldr	r2, [pc, #28]	@ (8003808 <UART_SetConfig+0x118>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	440a      	add	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40013800 	.word	0x40013800
 8003808:	51eb851f 	.word	0x51eb851f

0800380c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	4638      	mov	r0, r7
 8003816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003836:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800383a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800385a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800385e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	b29b      	uxth	r3, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	b29b      	uxth	r3, r3
 8003870:	4013      	ands	r3, r2
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	4638      	mov	r0, r7
 80038a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038d8:	b480      	push	{r7}
 80038da:	b09d      	sub	sp, #116	@ 0x74
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80038fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	78db      	ldrb	r3, [r3, #3]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d81f      	bhi.n	800394a <USB_ActivateEndpoint+0x72>
 800390a:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <USB_ActivateEndpoint+0x38>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003921 	.word	0x08003921
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003953 	.word	0x08003953
 800391c:	0800392f 	.word	0x0800392f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003920:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003924:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003928:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800392c:	e012      	b.n	8003954 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800392e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003932:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003936:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800393a:	e00b      	b.n	8003954 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800393c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003940:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003944:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003948:	e004      	b.n	8003954 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003950:	e000      	b.n	8003954 <USB_ActivateEndpoint+0x7c>
      break;
 8003952:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800396a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003972:	b29b      	uxth	r3, r3
 8003974:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800398c:	b29b      	uxth	r3, r3
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80039a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	7b1b      	ldrb	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f040 8178 	bne.w	8003cb4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8084 	beq.w	8003ad6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4413      	add	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	011a      	lsls	r2, r3, #4
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	88db      	ldrh	r3, [r3, #6]
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	827b      	strh	r3, [r7, #18]
 8003a10:	8a7b      	ldrh	r3, [r7, #18]
 8003a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01b      	beq.n	8003a52 <USB_ActivateEndpoint+0x17a>
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a30:	823b      	strh	r3, [r7, #16]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	441a      	add	r2, r3
 8003a3c:	8a3b      	ldrh	r3, [r7, #16]
 8003a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	78db      	ldrb	r3, [r3, #3]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d020      	beq.n	8003a9c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a70:	81bb      	strh	r3, [r7, #12]
 8003a72:	89bb      	ldrh	r3, [r7, #12]
 8003a74:	f083 0320 	eor.w	r3, r3, #32
 8003a78:	81bb      	strh	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	89bb      	ldrh	r3, [r7, #12]
 8003a86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]
 8003a9a:	e2d5      	b.n	8004048 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab2:	81fb      	strh	r3, [r7, #14]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	89fb      	ldrh	r3, [r7, #14]
 8003ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	8013      	strh	r3, [r2, #0]
 8003ad4:	e2b8      	b.n	8004048 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae6:	4413      	add	r3, r2
 8003ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	011a      	lsls	r2, r3, #4
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	88db      	ldrh	r3, [r3, #6]
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b08:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1a:	4413      	add	r3, r2
 8003b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	011a      	lsls	r2, r3, #4
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	4413      	add	r3, r2
 8003b28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b44:	d91d      	bls.n	8003b82 <USB_ActivateEndpoint+0x2aa>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <USB_ActivateEndpoint+0x288>
 8003b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	029b      	lsls	r3, r3, #10
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	801a      	strh	r2, [r3, #0]
 8003b80:	e026      	b.n	8003bd0 <USB_ActivateEndpoint+0x2f8>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <USB_ActivateEndpoint+0x2c8>
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e017      	b.n	8003bd0 <USB_ActivateEndpoint+0x2f8>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <USB_ActivateEndpoint+0x2e2>
 8003bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	029b      	lsls	r3, r3, #10
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003bde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01b      	beq.n	8003c20 <USB_ActivateEndpoint+0x348>
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfe:	843b      	strh	r3, [r7, #32]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	8c3b      	ldrh	r3, [r7, #32]
 8003c0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d124      	bne.n	8003c72 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	83bb      	strh	r3, [r7, #28]
 8003c40:	8bbb      	ldrh	r3, [r7, #28]
 8003c42:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003c46:	83bb      	strh	r3, [r7, #28]
 8003c48:	8bbb      	ldrh	r3, [r7, #28]
 8003c4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c4e:	83bb      	strh	r3, [r7, #28]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	8bbb      	ldrh	r3, [r7, #28]
 8003c5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	8013      	strh	r3, [r2, #0]
 8003c70:	e1ea      	b.n	8004048 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c88:	83fb      	strh	r3, [r7, #30]
 8003c8a:	8bfb      	ldrh	r3, [r7, #30]
 8003c8c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c90:	83fb      	strh	r3, [r7, #30]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	8bfb      	ldrh	r3, [r7, #30]
 8003c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]
 8003cb2:	e1c9      	b.n	8004048 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	78db      	ldrb	r3, [r3, #3]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d11e      	bne.n	8003cfa <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	441a      	add	r2, r3
 8003ce0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cec:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	8013      	strh	r3, [r2, #0]
 8003cf8:	e01d      	b.n	8003d36 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d10:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8003d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d46:	4413      	add	r3, r2
 8003d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	011a      	lsls	r2, r3, #4
 8003d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	891b      	ldrh	r3, [r3, #8]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7a:	4413      	add	r3, r2
 8003d7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	011a      	lsls	r2, r3, #4
 8003d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003d8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	895b      	ldrh	r3, [r3, #10]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d9c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 8093 	bne.w	8003ece <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003db8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01b      	beq.n	8003dfc <USB_ActivateEndpoint+0x524>
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	441a      	add	r2, r3
 8003de6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003df0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003e0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <USB_ActivateEndpoint+0x574>
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003e64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003e66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e6a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003e6c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003e6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eaa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	441a      	add	r2, r3
 8003eb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	8013      	strh	r3, [r2, #0]
 8003ecc:	e0bc      	b.n	8004048 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01d      	beq.n	8003f26 <USB_ActivateEndpoint+0x64e>
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f00:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003f36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01d      	beq.n	8003f7e <USB_ActivateEndpoint+0x6a6>
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f58:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	78db      	ldrb	r3, [r3, #3]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d024      	beq.n	8003fd0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f9c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003fa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003fa4:	f083 0320 	eor.w	r3, r3, #32
 8003fa8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8013      	strh	r3, [r2, #0]
 8003fce:	e01d      	b.n	800400c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004008:	b29b      	uxth	r3, r3
 800400a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800401e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004022:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800403c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004044:	b29b      	uxth	r3, r3
 8004046:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004048:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800404c:	4618      	mov	r0, r3
 800404e:	3774      	adds	r7, #116	@ 0x74
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop

08004058 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004058:	b480      	push	{r7}
 800405a:	b08d      	sub	sp, #52	@ 0x34
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	7b1b      	ldrb	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 808e 	bne.w	8004188 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	785b      	ldrb	r3, [r3, #1]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d044      	beq.n	80040fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	81bb      	strh	r3, [r7, #12]
 8004082:	89bb      	ldrh	r3, [r7, #12]
 8004084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01b      	beq.n	80040c4 <USB_DeactivateEndpoint+0x6c>
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a2:	817b      	strh	r3, [r7, #10]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040da:	813b      	strh	r3, [r7, #8]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	893b      	ldrh	r3, [r7, #8]
 80040e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	8013      	strh	r3, [r2, #0]
 80040fc:	e192      	b.n	8004424 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	827b      	strh	r3, [r7, #18]
 800410c:	8a7b      	ldrh	r3, [r7, #18]
 800410e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01b      	beq.n	800414e <USB_DeactivateEndpoint+0xf6>
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412c:	823b      	strh	r3, [r7, #16]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	441a      	add	r2, r3
 8004138:	8a3b      	ldrh	r3, [r7, #16]
 800413a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800413e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800414a:	b29b      	uxth	r3, r3
 800414c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004164:	81fb      	strh	r3, [r7, #14]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	441a      	add	r2, r3
 8004170:	89fb      	ldrh	r3, [r7, #14]
 8004172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800417a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800417e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004182:	b29b      	uxth	r3, r3
 8004184:	8013      	strh	r3, [r2, #0]
 8004186:	e14d      	b.n	8004424 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 80a5 	bne.w	80042dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	843b      	strh	r3, [r7, #32]
 80041a0:	8c3b      	ldrh	r3, [r7, #32]
 80041a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01b      	beq.n	80041e2 <USB_DeactivateEndpoint+0x18a>
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c0:	83fb      	strh	r3, [r7, #30]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	8bfb      	ldrh	r3, [r7, #30]
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	83bb      	strh	r3, [r7, #28]
 80041f0:	8bbb      	ldrh	r3, [r7, #28]
 80041f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01b      	beq.n	8004232 <USB_DeactivateEndpoint+0x1da>
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004210:	837b      	strh	r3, [r7, #26]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	8b7b      	ldrh	r3, [r7, #26]
 800421e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800422a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800422e:	b29b      	uxth	r3, r3
 8004230:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004248:	833b      	strh	r3, [r7, #24]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	8b3b      	ldrh	r3, [r7, #24]
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004262:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800427c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004280:	82fb      	strh	r3, [r7, #22]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	8afb      	ldrh	r3, [r7, #22]
 800428e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800429a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b8:	82bb      	strh	r3, [r7, #20]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	8abb      	ldrh	r3, [r7, #20]
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]
 80042da:	e0a3      	b.n	8004424 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80042ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80042ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <USB_DeactivateEndpoint+0x2d4>
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004320:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800433a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800433c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <USB_DeactivateEndpoint+0x324>
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800436c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004374:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004378:	b29b      	uxth	r3, r3
 800437a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004392:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	441a      	add	r2, r3
 800439e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80043a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	441a      	add	r2, r3
 80043d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004402:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004410:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004414:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800441c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004420:	b29b      	uxth	r3, r3
 8004422:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3734      	adds	r7, #52	@ 0x34
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b0c2      	sub	sp, #264	@ 0x108
 8004434:	af00      	add	r7, sp, #0
 8004436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800443a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800443e:	6018      	str	r0, [r3, #0]
 8004440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004448:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800444a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800444e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 86b7 	bne.w	80051ca <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800445c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800446c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d908      	bls.n	800448a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800447c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004488:	e007      	b.n	800449a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800448a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800449a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800449e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	7b1b      	ldrb	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d13a      	bne.n	8004520 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6959      	ldr	r1, [r3, #20]
 80044b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	88da      	ldrh	r2, [r3, #6]
 80044c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80044cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80044d0:	6800      	ldr	r0, [r0, #0]
 80044d2:	f001 fc9c 	bl	8005e0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	011a      	lsls	r2, r3, #4
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	f000 be1f 	b.w	800515e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	78db      	ldrb	r3, [r3, #3]
 800452c:	2b02      	cmp	r3, #2
 800452e:	f040 8462 	bne.w	8004df6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a1a      	ldr	r2, [r3, #32]
 800453e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	f240 83df 	bls.w	8004d0e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800455e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004576:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800457a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800457e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	441a      	add	r2, r3
 8004594:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800459c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045a0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80045a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80045ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045bc:	1ad2      	subs	r2, r2, r3
 80045be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 81c7 	beq.w	8004980 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d177      	bne.n	80046fe <USB_EPStartXfer+0x2ce>
 800460e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800461a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800461e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004628:	b29b      	uxth	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	4413      	add	r3, r2
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	011a      	lsls	r2, r3, #4
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	4413      	add	r3, r2
 8004644:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004654:	b29a      	uxth	r2, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	801a      	strh	r2, [r3, #0]
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004660:	d921      	bls.n	80046a6 <USB_EPStartXfer+0x276>
 8004662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800466c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <USB_EPStartXfer+0x252>
 8004678:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800467c:	3b01      	subs	r3, #1
 800467e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29a      	uxth	r2, r3
 8004688:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800468c:	b29b      	uxth	r3, r3
 800468e:	029b      	lsls	r3, r3, #10
 8004690:	b29b      	uxth	r3, r3
 8004692:	4313      	orrs	r3, r2
 8004694:	b29b      	uxth	r3, r3
 8004696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800469e:	b29a      	uxth	r2, r3
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	e050      	b.n	8004748 <USB_EPStartXfer+0x318>
 80046a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <USB_EPStartXfer+0x294>
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046bc:	b29a      	uxth	r2, r3
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	801a      	strh	r2, [r3, #0]
 80046c2:	e041      	b.n	8004748 <USB_EPStartXfer+0x318>
 80046c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80046ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <USB_EPStartXfer+0x2b4>
 80046da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80046de:	3301      	adds	r3, #1
 80046e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	029b      	lsls	r3, r3, #10
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	4313      	orrs	r3, r2
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	e024      	b.n	8004748 <USB_EPStartXfer+0x318>
 80046fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d11c      	bne.n	8004748 <USB_EPStartXfer+0x318>
 800470e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800471c:	b29b      	uxth	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004722:	4413      	add	r3, r2
 8004724:	633b      	str	r3, [r7, #48]	@ 0x30
 8004726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800472a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	011a      	lsls	r2, r3, #4
 8004734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004736:	4413      	add	r3, r2
 8004738:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004742:	b29a      	uxth	r2, r3
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800474c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	895b      	ldrh	r3, [r3, #10]
 8004754:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800475c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6959      	ldr	r1, [r3, #20]
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004768:	b29b      	uxth	r3, r3
 800476a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800476e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004772:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004776:	6800      	ldr	r0, [r0, #0]
 8004778:	f001 fb49 	bl	8005e0e <USB_WritePMA>
            ep->xfer_buff += len;
 800477c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695a      	ldr	r2, [r3, #20]
 8004788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478c:	441a      	add	r2, r3
 800478e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800479a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800479e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6a1a      	ldr	r2, [r3, #32]
 80047a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d90f      	bls.n	80047d6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80047b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	621a      	str	r2, [r3, #32]
 80047d4:	e00e      	b.n	80047f4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80047d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80047e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2200      	movs	r2, #0
 80047f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d177      	bne.n	80048f4 <USB_EPStartXfer+0x4c4>
 8004804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	4413      	add	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800482c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	011a      	lsls	r2, r3, #4
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	4413      	add	r3, r2
 800483a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484a:	b29a      	uxth	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004854:	2b3e      	cmp	r3, #62	@ 0x3e
 8004856:	d921      	bls.n	800489c <USB_EPStartXfer+0x46c>
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <USB_EPStartXfer+0x448>
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004872:	3b01      	subs	r3, #1
 8004874:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29a      	uxth	r2, r3
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004882:	b29b      	uxth	r3, r3
 8004884:	029b      	lsls	r3, r3, #10
 8004886:	b29b      	uxth	r3, r3
 8004888:	4313      	orrs	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004894:	b29a      	uxth	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	e056      	b.n	800494a <USB_EPStartXfer+0x51a>
 800489c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <USB_EPStartXfer+0x48a>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	e047      	b.n	800494a <USB_EPStartXfer+0x51a>
 80048ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <USB_EPStartXfer+0x4aa>
 80048d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048d4:	3301      	adds	r3, #1
 80048d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	029b      	lsls	r3, r3, #10
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	4313      	orrs	r3, r2
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	e02a      	b.n	800494a <USB_EPStartXfer+0x51a>
 80048f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d122      	bne.n	800494a <USB_EPStartXfer+0x51a>
 8004904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	623b      	str	r3, [r7, #32]
 8004910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800491e:	b29b      	uxth	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	4413      	add	r3, r2
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800492c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	011a      	lsls	r2, r3, #4
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	4413      	add	r3, r2
 800493a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004944:	b29a      	uxth	r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800494a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800494e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	891b      	ldrh	r3, [r3, #8]
 8004956:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800495a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800495e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6959      	ldr	r1, [r3, #20]
 8004966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800496a:	b29b      	uxth	r3, r3
 800496c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004970:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004974:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004978:	6800      	ldr	r0, [r0, #0]
 800497a:	f001 fa48 	bl	8005e0e <USB_WritePMA>
 800497e:	e3ee      	b.n	800515e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	785b      	ldrb	r3, [r3, #1]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d177      	bne.n	8004a80 <USB_EPStartXfer+0x650>
 8004990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004994:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800499c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049b0:	4413      	add	r3, r2
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	011a      	lsls	r2, r3, #4
 80049c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c4:	4413      	add	r3, r2
 80049c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80049cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049da:	801a      	strh	r2, [r3, #0]
 80049dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80049e2:	d921      	bls.n	8004a28 <USB_EPStartXfer+0x5f8>
 80049e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <USB_EPStartXfer+0x5d4>
 80049fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049fe:	3b01      	subs	r3, #1
 8004a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	029b      	lsls	r3, r3, #10
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e056      	b.n	8004ad6 <USB_EPStartXfer+0x6a6>
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <USB_EPStartXfer+0x616>
 8004a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	e047      	b.n	8004ad6 <USB_EPStartXfer+0x6a6>
 8004a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d004      	beq.n	8004a66 <USB_EPStartXfer+0x636>
 8004a5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a60:	3301      	adds	r3, #1
 8004a62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	029b      	lsls	r3, r3, #10
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4313      	orrs	r3, r2
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	e02a      	b.n	8004ad6 <USB_EPStartXfer+0x6a6>
 8004a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d122      	bne.n	8004ad6 <USB_EPStartXfer+0x6a6>
 8004a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab0:	4413      	add	r3, r2
 8004ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	011a      	lsls	r2, r3, #4
 8004ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ad4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	891b      	ldrh	r3, [r3, #8]
 8004ae2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6959      	ldr	r1, [r3, #20]
 8004af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004afc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004b00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004b04:	6800      	ldr	r0, [r0, #0]
 8004b06:	f001 f982 	bl	8005e0e <USB_WritePMA>
            ep->xfer_buff += len;
 8004b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b1a:	441a      	add	r2, r3
 8004b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6a1a      	ldr	r2, [r3, #32]
 8004b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d90f      	bls.n	8004b64 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1a      	ldr	r2, [r3, #32]
 8004b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b54:	1ad2      	subs	r2, r2, r3
 8004b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	621a      	str	r2, [r3, #32]
 8004b62:	e00e      	b.n	8004b82 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d177      	bne.n	8004c8e <USB_EPStartXfer+0x85e>
 8004b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	4413      	add	r3, r2
 8004bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	011a      	lsls	r2, r3, #4
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bee:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bf0:	d921      	bls.n	8004c36 <USB_EPStartXfer+0x806>
 8004bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <USB_EPStartXfer+0x7e2>
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	029b      	lsls	r3, r3, #10
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	4313      	orrs	r3, r2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	e050      	b.n	8004cd8 <USB_EPStartXfer+0x8a8>
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <USB_EPStartXfer+0x824>
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	e041      	b.n	8004cd8 <USB_EPStartXfer+0x8a8>
 8004c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <USB_EPStartXfer+0x844>
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	029b      	lsls	r3, r3, #10
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	e024      	b.n	8004cd8 <USB_EPStartXfer+0x8a8>
 8004c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d11c      	bne.n	8004cd8 <USB_EPStartXfer+0x8a8>
 8004c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb2:	4413      	add	r3, r2
 8004cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	011a      	lsls	r2, r3, #4
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	895b      	ldrh	r3, [r3, #10]
 8004ce4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6959      	ldr	r1, [r3, #20]
 8004cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004cfe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004d02:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004d06:	6800      	ldr	r0, [r0, #0]
 8004d08:	f001 f881 	bl	8005e0e <USB_WritePMA>
 8004d0c:	e227      	b.n	800515e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d44:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d9a:	4413      	add	r3, r2
 8004d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	011a      	lsls	r2, r3, #4
 8004dac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dae:	4413      	add	r3, r2
 8004db0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	891b      	ldrh	r3, [r3, #8]
 8004dcc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6959      	ldr	r1, [r3, #20]
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004de6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004dea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004dee:	6800      	ldr	r0, [r0, #0]
 8004df0:	f001 f80d 	bl	8005e0e <USB_WritePMA>
 8004df4:	e1b3      	b.n	800515e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80c6 	beq.w	8004fc8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d177      	bne.n	8004f48 <USB_EPStartXfer+0xb18>
 8004e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e78:	4413      	add	r3, r2
 8004e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	011a      	lsls	r2, r3, #4
 8004e8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004eaa:	d921      	bls.n	8004ef0 <USB_EPStartXfer+0xac0>
 8004eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <USB_EPStartXfer+0xa9c>
 8004ec2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	029b      	lsls	r3, r3, #10
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e050      	b.n	8004f92 <USB_EPStartXfer+0xb62>
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <USB_EPStartXfer+0xade>
 8004ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e041      	b.n	8004f92 <USB_EPStartXfer+0xb62>
 8004f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f12:	085b      	lsrs	r3, r3, #1
 8004f14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d004      	beq.n	8004f2e <USB_EPStartXfer+0xafe>
 8004f24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004f28:	3301      	adds	r3, #1
 8004f2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	029b      	lsls	r3, r3, #10
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	e024      	b.n	8004f92 <USB_EPStartXfer+0xb62>
 8004f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d11c      	bne.n	8004f92 <USB_EPStartXfer+0xb62>
 8004f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f6c:	4413      	add	r3, r2
 8004f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f80:	4413      	add	r3, r2
 8004f82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	895b      	ldrh	r3, [r3, #10]
 8004f9e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6959      	ldr	r1, [r3, #20]
 8004fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004fb8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004fbc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004fc0:	6800      	ldr	r0, [r0, #0]
 8004fc2:	f000 ff24 	bl	8005e0e <USB_WritePMA>
 8004fc6:	e0ca      	b.n	800515e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d177      	bne.n	80050c8 <USB_EPStartXfer+0xc98>
 8004fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	011a      	lsls	r2, r3, #4
 800500a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800500c:	4413      	add	r3, r2
 800500e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005012:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800501e:	b29a      	uxth	r2, r3
 8005020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	2b3e      	cmp	r3, #62	@ 0x3e
 800502a:	d921      	bls.n	8005070 <USB_EPStartXfer+0xc40>
 800502c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <USB_EPStartXfer+0xc1c>
 8005042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005046:	3b01      	subs	r3, #1
 8005048:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800504c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29a      	uxth	r2, r3
 8005052:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005056:	b29b      	uxth	r3, r3
 8005058:	029b      	lsls	r3, r3, #10
 800505a:	b29b      	uxth	r3, r3
 800505c:	4313      	orrs	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005068:	b29a      	uxth	r2, r3
 800506a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e05c      	b.n	800512a <USB_EPStartXfer+0xcfa>
 8005070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <USB_EPStartXfer+0xc5e>
 8005078:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005086:	b29a      	uxth	r2, r3
 8005088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	e04d      	b.n	800512a <USB_EPStartXfer+0xcfa>
 800508e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <USB_EPStartXfer+0xc7e>
 80050a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80050a8:	3301      	adds	r3, #1
 80050aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80050ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	029b      	lsls	r3, r3, #10
 80050bc:	b29b      	uxth	r3, r3
 80050be:	4313      	orrs	r3, r2
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	e030      	b.n	800512a <USB_EPStartXfer+0xcfa>
 80050c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d128      	bne.n	800512a <USB_EPStartXfer+0xcfa>
 80050d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050fc:	4413      	add	r3, r2
 80050fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	011a      	lsls	r2, r3, #4
 8005110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005114:	4413      	add	r3, r2
 8005116:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800511a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	b29a      	uxth	r2, r3
 8005124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005128:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800512a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	891b      	ldrh	r3, [r3, #8]
 8005136:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800513a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6959      	ldr	r1, [r3, #20]
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514a:	b29b      	uxth	r3, r3
 800514c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005150:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005154:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005158:	6800      	ldr	r0, [r0, #0]
 800515a:	f000 fe58 	bl	8005e0e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800515e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800516c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005184:	817b      	strh	r3, [r7, #10]
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	f083 0310 	eor.w	r3, r3, #16
 800518c:	817b      	strh	r3, [r7, #10]
 800518e:	897b      	ldrh	r3, [r7, #10]
 8005190:	f083 0320 	eor.w	r3, r3, #32
 8005194:	817b      	strh	r3, [r7, #10]
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	441a      	add	r2, r3
 80051b0:	897b      	ldrh	r3, [r7, #10]
 80051b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	8013      	strh	r3, [r2, #0]
 80051c6:	f000 bcde 	b.w	8005b86 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80051ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	7b1b      	ldrb	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 80bb 	bne.w	8005352 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80051dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d917      	bls.n	8005228 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005218:	1ad2      	subs	r2, r2, r3
 800521a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	619a      	str	r2, [r3, #24]
 8005226:	e00e      	b.n	8005246 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005262:	b29b      	uxth	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800526a:	4413      	add	r3, r2
 800526c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	011a      	lsls	r2, r3, #4
 800527e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005282:	4413      	add	r3, r2
 8005284:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005288:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800528c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005298:	b29a      	uxth	r2, r3
 800529a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80052a6:	d924      	bls.n	80052f2 <USB_EPStartXfer+0xec2>
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <USB_EPStartXfer+0xe98>
 80052be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80052c2:	3b01      	subs	r3, #1
 80052c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	029b      	lsls	r3, r3, #10
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4313      	orrs	r3, r2
 80052dc:	b29b      	uxth	r3, r3
 80052de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	f000 bc10 	b.w	8005b12 <USB_EPStartXfer+0x16e2>
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10c      	bne.n	8005314 <USB_EPStartXfer+0xee4>
 80052fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800530a:	b29a      	uxth	r2, r3
 800530c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e3fe      	b.n	8005b12 <USB_EPStartXfer+0x16e2>
 8005314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <USB_EPStartXfer+0xf04>
 800532a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800532e:	3301      	adds	r3, #1
 8005330:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005334:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29a      	uxth	r2, r3
 800533c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005340:	b29b      	uxth	r3, r3
 8005342:	029b      	lsls	r3, r3, #10
 8005344:	b29b      	uxth	r3, r3
 8005346:	4313      	orrs	r3, r2
 8005348:	b29a      	uxth	r2, r3
 800534a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800534e:	801a      	strh	r2, [r3, #0]
 8005350:	e3df      	b.n	8005b12 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	78db      	ldrb	r3, [r3, #3]
 800535e:	2b02      	cmp	r3, #2
 8005360:	f040 8218 	bne.w	8005794 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 809d 	bne.w	80054b0 <USB_EPStartXfer+0x1080>
 8005376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800539a:	4413      	add	r3, r2
 800539c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	011a      	lsls	r2, r3, #4
 80053ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053b2:	4413      	add	r3, r2
 80053b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80053de:	d92b      	bls.n	8005438 <USB_EPStartXfer+0x1008>
 80053e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <USB_EPStartXfer+0xfe0>
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	3b01      	subs	r3, #1
 800540c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005410:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29a      	uxth	r2, r3
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541c:	b29b      	uxth	r3, r3
 800541e:	029b      	lsls	r3, r3, #10
 8005420:	b29b      	uxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e070      	b.n	800551a <USB_EPStartXfer+0x10ea>
 8005438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800543c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10c      	bne.n	8005462 <USB_EPStartXfer+0x1032>
 8005448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005458:	b29a      	uxth	r2, r3
 800545a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e05b      	b.n	800551a <USB_EPStartXfer+0x10ea>
 8005462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d004      	beq.n	8005492 <USB_EPStartXfer+0x1062>
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548c:	3301      	adds	r3, #1
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29a      	uxth	r2, r3
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549e:	b29b      	uxth	r3, r3
 80054a0:	029b      	lsls	r3, r3, #10
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	4313      	orrs	r3, r2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	e034      	b.n	800551a <USB_EPStartXfer+0x10ea>
 80054b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d12c      	bne.n	800551a <USB_EPStartXfer+0x10ea>
 80054c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054e4:	4413      	add	r3, r2
 80054e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	011a      	lsls	r2, r3, #4
 80054f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054fc:	4413      	add	r3, r2
 80054fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	b29a      	uxth	r2, r3
 8005514:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 809d 	bne.w	8005674 <USB_EPStartXfer+0x1244>
 800553a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800555e:	4413      	add	r3, r2
 8005560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	011a      	lsls	r2, r3, #4
 8005572:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005576:	4413      	add	r3, r2
 8005578:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800557c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800558c:	b29a      	uxth	r2, r3
 800558e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80055a2:	d92b      	bls.n	80055fc <USB_EPStartXfer+0x11cc>
 80055a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <USB_EPStartXfer+0x11a4>
 80055ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ce:	3b01      	subs	r3, #1
 80055d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e069      	b.n	80056d0 <USB_EPStartXfer+0x12a0>
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10c      	bne.n	8005626 <USB_EPStartXfer+0x11f6>
 800560c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b29b      	uxth	r3, r3
 8005614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800561c:	b29a      	uxth	r2, r3
 800561e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e054      	b.n	80056d0 <USB_EPStartXfer+0x12a0>
 8005626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <USB_EPStartXfer+0x1226>
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005650:	3301      	adds	r3, #1
 8005652:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005656:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29a      	uxth	r2, r3
 800565e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005662:	b29b      	uxth	r3, r3
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	b29b      	uxth	r3, r3
 8005668:	4313      	orrs	r3, r2
 800566a:	b29a      	uxth	r2, r3
 800566c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005670:	801a      	strh	r2, [r3, #0]
 8005672:	e02d      	b.n	80056d0 <USB_EPStartXfer+0x12a0>
 8005674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d125      	bne.n	80056d0 <USB_EPStartXfer+0x12a0>
 8005684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800569a:	4413      	add	r3, r2
 800569c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	011a      	lsls	r2, r3, #4
 80056ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056b2:	4413      	add	r3, r2
 80056b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056ce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80056d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8218 	beq.w	8005b12 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80056e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005702:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <USB_EPStartXfer+0x12ea>
 800570e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10d      	bne.n	8005736 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800571a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800571e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005722:	2b00      	cmp	r3, #0
 8005724:	f040 81f5 	bne.w	8005b12 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005728:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800572c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	f040 81ee 	bne.w	8005b12 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800577e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800578a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800578e:	b29b      	uxth	r3, r3
 8005790:	8013      	strh	r3, [r2, #0]
 8005792:	e1be      	b.n	8005b12 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	78db      	ldrb	r3, [r3, #3]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	f040 81b4 	bne.w	8005b0e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80057a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d917      	bls.n	80057f2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80057c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80057d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	619a      	str	r2, [r3, #24]
 80057f0:	e00e      	b.n	8005810 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80057f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f040 8085 	bne.w	800592c <USB_EPStartXfer+0x14fc>
 8005822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005846:	4413      	add	r3, r2
 8005848:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800584c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	011a      	lsls	r2, r3, #4
 800585a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800585e:	4413      	add	r3, r2
 8005860:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005864:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005874:	b29a      	uxth	r2, r3
 8005876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	2b3e      	cmp	r3, #62	@ 0x3e
 8005882:	d923      	bls.n	80058cc <USB_EPStartXfer+0x149c>
 8005884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <USB_EPStartXfer+0x1474>
 800589a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800589e:	3b01      	subs	r3, #1
 80058a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	4313      	orrs	r3, r2
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e060      	b.n	800598e <USB_EPStartXfer+0x155e>
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10c      	bne.n	80058ee <USB_EPStartXfer+0x14be>
 80058d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	e04f      	b.n	800598e <USB_EPStartXfer+0x155e>
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <USB_EPStartXfer+0x14de>
 8005904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005908:	3301      	adds	r3, #1
 800590a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800590e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29a      	uxth	r2, r3
 8005916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800591a:	b29b      	uxth	r3, r3
 800591c:	029b      	lsls	r3, r3, #10
 800591e:	b29b      	uxth	r3, r3
 8005920:	4313      	orrs	r3, r2
 8005922:	b29a      	uxth	r2, r3
 8005924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	e030      	b.n	800598e <USB_EPStartXfer+0x155e>
 800592c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d128      	bne.n	800598e <USB_EPStartXfer+0x155e>
 800593c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005960:	4413      	add	r3, r2
 8005962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	011a      	lsls	r2, r3, #4
 8005974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005978:	4413      	add	r3, r2
 800597a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800597e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005986:	b29a      	uxth	r2, r3
 8005988:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800599c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f040 8085 	bne.w	8005ab8 <USB_EPStartXfer+0x1688>
 80059ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80059d2:	4413      	add	r3, r2
 80059d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	011a      	lsls	r2, r3, #4
 80059e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a0e:	d923      	bls.n	8005a58 <USB_EPStartXfer+0x1628>
 8005a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <USB_EPStartXfer+0x1600>
 8005a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	029b      	lsls	r3, r3, #10
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a54:	801a      	strh	r2, [r3, #0]
 8005a56:	e05c      	b.n	8005b12 <USB_EPStartXfer+0x16e2>
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10c      	bne.n	8005a7a <USB_EPStartXfer+0x164a>
 8005a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	e04b      	b.n	8005b12 <USB_EPStartXfer+0x16e2>
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <USB_EPStartXfer+0x166a>
 8005a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a94:	3301      	adds	r3, #1
 8005a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e02c      	b.n	8005b12 <USB_EPStartXfer+0x16e2>
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d124      	bne.n	8005b12 <USB_EPStartXfer+0x16e2>
 8005ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005acc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ade:	4413      	add	r3, r2
 8005ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	011a      	lsls	r2, r3, #4
 8005af2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005af6:	4413      	add	r3, r2
 8005af8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e001      	b.n	8005b12 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e03a      	b.n	8005b88 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b38:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005b3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b44:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005b48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b50:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bba:	81bb      	strh	r3, [r7, #12]
 8005bbc:	89bb      	ldrh	r3, [r7, #12]
 8005bbe:	f083 0310 	eor.w	r3, r3, #16
 8005bc2:	81bb      	strh	r3, [r7, #12]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	89bb      	ldrh	r3, [r7, #12]
 8005bd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	8013      	strh	r3, [r2, #0]
 8005be4:	e01f      	b.n	8005c26 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfc:	81fb      	strh	r3, [r7, #14]
 8005bfe:	89fb      	ldrh	r3, [r7, #14]
 8005c00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c04:	81fb      	strh	r3, [r7, #14]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	441a      	add	r2, r3
 8005c10:	89fb      	ldrh	r3, [r7, #14]
 8005c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	7b1b      	ldrb	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 809d 	bne.w	8005d80 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d04c      	beq.n	8005ce8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	823b      	strh	r3, [r7, #16]
 8005c5c:	8a3b      	ldrh	r3, [r7, #16]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01b      	beq.n	8005c9e <USB_EPClearStall+0x6c>
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7c:	81fb      	strh	r3, [r7, #14]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d06c      	beq.n	8005d80 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cbc:	81bb      	strh	r3, [r7, #12]
 8005cbe:	89bb      	ldrh	r3, [r7, #12]
 8005cc0:	f083 0320 	eor.w	r3, r3, #32
 8005cc4:	81bb      	strh	r3, [r7, #12]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	89bb      	ldrh	r3, [r7, #12]
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
 8005ce6:	e04b      	b.n	8005d80 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	82fb      	strh	r3, [r7, #22]
 8005cf6:	8afb      	ldrh	r3, [r7, #22]
 8005cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <USB_EPClearStall+0x106>
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d16:	82bb      	strh	r3, [r7, #20]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	8abb      	ldrh	r3, [r7, #20]
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	827b      	strh	r3, [r7, #18]
 8005d50:	8a7b      	ldrh	r3, [r7, #18]
 8005d52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d56:	827b      	strh	r3, [r7, #18]
 8005d58:	8a7b      	ldrh	r3, [r7, #18]
 8005d5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d5e:	827b      	strh	r3, [r7, #18]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8a7b      	ldrh	r3, [r7, #18]
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d103      	bne.n	8005da6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2280      	movs	r2, #128	@ 0x80
 8005da2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr

08005dda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005dec:	68fb      	ldr	r3, [r7, #12]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr

08005e0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b08b      	sub	sp, #44	@ 0x2c
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	80fb      	strh	r3, [r7, #6]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e24:	88bb      	ldrh	r3, [r7, #4]
 8005e26:	3301      	adds	r3, #1
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	005a      	lsls	r2, r3, #1
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e40:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e46:	e01f      	b.n	8005e88 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3301      	adds	r3, #1
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	b21a      	sxth	r2, r3
 8005e5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	8a7a      	ldrh	r2, [r7, #18]
 8005e68:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	3302      	adds	r3, #2
 8005e74:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	3b01      	subs	r3, #1
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1dc      	bne.n	8005e48 <USB_WritePMA+0x3a>
  }
}
 8005e8e:	bf00      	nop
 8005e90:	bf00      	nop
 8005e92:	372c      	adds	r7, #44	@ 0x2c
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr

08005e9a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b08b      	sub	sp, #44	@ 0x2c
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	80fb      	strh	r3, [r7, #6]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005eb0:	88bb      	ldrh	r3, [r7, #4]
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	005a      	lsls	r2, r3, #1
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ecc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed2:	e01b      	b.n	8005f0c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	3302      	adds	r3, #2
 8005ee0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	0a1b      	lsrs	r3, r3, #8
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3301      	adds	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	3302      	adds	r3, #2
 8005f04:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e0      	bne.n	8005ed4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005f12:	88bb      	ldrh	r3, [r7, #4]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	701a      	strb	r2, [r3, #0]
  }
}
 8005f2e:	bf00      	nop
 8005f30:	372c      	adds	r7, #44	@ 0x2c
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7c1b      	ldrb	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d115      	bne.n	8005f7c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f54:	2202      	movs	r2, #2
 8005f56:	2181      	movs	r1, #129	@ 0x81
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 fe82 	bl	8007c62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f68:	2202      	movs	r2, #2
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fe78 	bl	8007c62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005f7a:	e012      	b.n	8005fa2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f7c:	2340      	movs	r3, #64	@ 0x40
 8005f7e:	2202      	movs	r2, #2
 8005f80:	2181      	movs	r1, #129	@ 0x81
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fe6d 	bl	8007c62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f8e:	2340      	movs	r3, #64	@ 0x40
 8005f90:	2202      	movs	r2, #2
 8005f92:	2101      	movs	r1, #1
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fe64 	bl	8007c62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	2182      	movs	r1, #130	@ 0x82
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 fe5a 	bl	8007c62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fb4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005fb8:	f001 ff7a 	bl	8007eb0 <USBD_static_malloc>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d102      	bne.n	8005fd4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	73fb      	strb	r3, [r7, #15]
 8005fd2:	e026      	b.n	8006022 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fda:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7c1b      	ldrb	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006008:	2101      	movs	r1, #1
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 ff19 	bl	8007e42 <USBD_LL_PrepareReceive>
 8006010:	e007      	b.n	8006022 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	2101      	movs	r1, #1
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 ff10 	bl	8007e42 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800603c:	2181      	movs	r1, #129	@ 0x81
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fe35 	bl	8007cae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800604a:	2101      	movs	r1, #1
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 fe2e 	bl	8007cae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800605a:	2182      	movs	r1, #130	@ 0x82
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fe26 	bl	8007cae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00e      	beq.n	8006090 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006082:	4618      	mov	r0, r3
 8006084:	f001 ff20 	bl	8007ec8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b086      	sub	sp, #24
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060aa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d039      	beq.n	8006138 <USBD_CDC_Setup+0x9e>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d17f      	bne.n	80061c8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	88db      	ldrh	r3, [r3, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d029      	beq.n	8006124 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da11      	bge.n	80060fe <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80060e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	88d2      	ldrh	r2, [r2, #6]
 80060ec:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060ee:	6939      	ldr	r1, [r7, #16]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	88db      	ldrh	r3, [r3, #6]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 fa06 	bl	8007508 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80060fc:	e06b      	b.n	80061d6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	785a      	ldrb	r2, [r3, #1]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	88db      	ldrh	r3, [r3, #6]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006114:	6939      	ldr	r1, [r7, #16]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	88db      	ldrh	r3, [r3, #6]
 800611a:	461a      	mov	r2, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fa21 	bl	8007564 <USBD_CtlPrepareRx>
      break;
 8006122:	e058      	b.n	80061d6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	7850      	ldrb	r0, [r2, #1]
 8006130:	2200      	movs	r2, #0
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	4798      	blx	r3
      break;
 8006136:	e04e      	b.n	80061d6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	2b0b      	cmp	r3, #11
 800613e:	d02e      	beq.n	800619e <USBD_CDC_Setup+0x104>
 8006140:	2b0b      	cmp	r3, #11
 8006142:	dc38      	bgt.n	80061b6 <USBD_CDC_Setup+0x11c>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <USBD_CDC_Setup+0xb4>
 8006148:	2b0a      	cmp	r3, #10
 800614a:	d014      	beq.n	8006176 <USBD_CDC_Setup+0xdc>
 800614c:	e033      	b.n	80061b6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006154:	2b03      	cmp	r3, #3
 8006156:	d107      	bne.n	8006168 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006158:	f107 030c 	add.w	r3, r7, #12
 800615c:	2202      	movs	r2, #2
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f001 f9d1 	bl	8007508 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006166:	e02e      	b.n	80061c6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 f962 	bl	8007434 <USBD_CtlError>
            ret = USBD_FAIL;
 8006170:	2302      	movs	r3, #2
 8006172:	75fb      	strb	r3, [r7, #23]
          break;
 8006174:	e027      	b.n	80061c6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800617c:	2b03      	cmp	r3, #3
 800617e:	d107      	bne.n	8006190 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006180:	f107 030f 	add.w	r3, r7, #15
 8006184:	2201      	movs	r2, #1
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f9bd 	bl	8007508 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800618e:	e01a      	b.n	80061c6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 f94e 	bl	8007434 <USBD_CtlError>
            ret = USBD_FAIL;
 8006198:	2302      	movs	r3, #2
 800619a:	75fb      	strb	r3, [r7, #23]
          break;
 800619c:	e013      	b.n	80061c6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d00d      	beq.n	80061c4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 f942 	bl	8007434 <USBD_CtlError>
            ret = USBD_FAIL;
 80061b0:	2302      	movs	r3, #2
 80061b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061b4:	e006      	b.n	80061c4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 f93b 	bl	8007434 <USBD_CtlError>
          ret = USBD_FAIL;
 80061be:	2302      	movs	r3, #2
 80061c0:	75fb      	strb	r3, [r7, #23]
          break;
 80061c2:	e000      	b.n	80061c6 <USBD_CDC_Setup+0x12c>
          break;
 80061c4:	bf00      	nop
      }
      break;
 80061c6:	e006      	b.n	80061d6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 f932 	bl	8007434 <USBD_CtlError>
      ret = USBD_FAIL;
 80061d0:	2302      	movs	r3, #2
 80061d2:	75fb      	strb	r3, [r7, #23]
      break;
 80061d4:	bf00      	nop
  }

  return ret;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80061fa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d03a      	beq.n	800627c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	440b      	add	r3, r1
 8006214:	331c      	adds	r3, #28
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d029      	beq.n	8006270 <USBD_CDC_DataIn+0x90>
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	331c      	adds	r3, #28
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	78f9      	ldrb	r1, [r7, #3]
 8006230:	68b8      	ldr	r0, [r7, #8]
 8006232:	460b      	mov	r3, r1
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4403      	add	r3, r0
 800623c:	3320      	adds	r3, #32
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	fbb2 f1f3 	udiv	r1, r2, r3
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d110      	bne.n	8006270 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	331c      	adds	r3, #28
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006262:	78f9      	ldrb	r1, [r7, #3]
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 fdc7 	bl	8007dfc <USBD_LL_Transmit>
 800626e:	e003      	b.n	8006278 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006298:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fdf2 	bl	8007e88 <USBD_LL_GetRxDataSize>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80062ca:	4611      	mov	r1, r2
 80062cc:	4798      	blx	r3

    return USBD_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e000      	b.n	80062d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80062d2:	2302      	movs	r3, #2
  }
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d014      	beq.n	8006320 <USBD_CDC_EP0_RxReady+0x44>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80062fc:	2bff      	cmp	r3, #255	@ 0xff
 80062fe:	d00f      	beq.n	8006320 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800630e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006316:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	22ff      	movs	r2, #255	@ 0xff
 800631c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2243      	movs	r2, #67	@ 0x43
 8006338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800633a:	4b03      	ldr	r3, [pc, #12]	@ (8006348 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000094 	.word	0x20000094

0800634c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2243      	movs	r2, #67	@ 0x43
 8006358:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800635a:	4b03      	ldr	r3, [pc, #12]	@ (8006368 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000050 	.word	0x20000050

0800636c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2243      	movs	r2, #67	@ 0x43
 8006378:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800637a:	4b03      	ldr	r3, [pc, #12]	@ (8006388 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	200000d8 	.word	0x200000d8

0800638c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	220a      	movs	r2, #10
 8006398:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800639a:	4b03      	ldr	r3, [pc, #12]	@ (80063a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	2000000c 	.word	0x2000000c

080063ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80063b6:	2302      	movs	r3, #2
 80063b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr

080063d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800641a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800643e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01c      	beq.n	8006484 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006450:	2b00      	cmp	r3, #0
 8006452:	d115      	bne.n	8006480 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006472:	b29b      	uxth	r3, r3
 8006474:	2181      	movs	r1, #129	@ 0x81
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fcc0 	bl	8007dfc <USBD_LL_Transmit>

      return USBD_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e002      	b.n	8006486 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006484:	2302      	movs	r3, #2
  }
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7c1b      	ldrb	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064ba:	2101      	movs	r1, #1
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fcc0 	bl	8007e42 <USBD_LL_PrepareReceive>
 80064c2:	e007      	b.n	80064d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064ca:	2340      	movs	r3, #64	@ 0x40
 80064cc:	2101      	movs	r1, #1
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 fcb7 	bl	8007e42 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80064d8:	2302      	movs	r3, #2
  }
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	4613      	mov	r3, r2
 80064ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80064f6:	2302      	movs	r3, #2
 80064f8:	e01a      	b.n	8006530 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	79fa      	ldrb	r2, [r7, #7]
 8006526:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f001 fb25 	bl	8007b78 <USBD_LL_Init>

  return USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d006      	beq.n	800655a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	e001      	b.n	800655e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800655a:	2302      	movs	r3, #2
 800655c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fb5a 	bl	8007c2c <USBD_LL_Start>

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr

08006596 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80065a2:	2302      	movs	r3, #2
 80065a4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	4611      	mov	r1, r2
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	78fa      	ldrb	r2, [r7, #3]
 80065ea:	4611      	mov	r1, r2
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	4798      	blx	r3

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fed8 	bl	80073c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2b02      	cmp	r3, #2
 8006634:	d016      	beq.n	8006664 <USBD_LL_SetupStage+0x6a>
 8006636:	2b02      	cmp	r3, #2
 8006638:	d81c      	bhi.n	8006674 <USBD_LL_SetupStage+0x7a>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USBD_LL_SetupStage+0x4a>
 800663e:	2b01      	cmp	r3, #1
 8006640:	d008      	beq.n	8006654 <USBD_LL_SetupStage+0x5a>
 8006642:	e017      	b.n	8006674 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f9cb 	bl	80069e8 <USBD_StdDevReq>
      break;
 8006652:	e01a      	b.n	800668a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fa2d 	bl	8006abc <USBD_StdItfReq>
      break;
 8006662:	e012      	b.n	800668a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fa6d 	bl	8006b4c <USBD_StdEPReq>
      break;
 8006672:	e00a      	b.n	800668a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800667a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800667e:	b2db      	uxtb	r3, r3
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fb32 	bl	8007cec <USBD_LL_StallEP>
      break;
 8006688:	bf00      	nop
  }

  return USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	460b      	mov	r3, r1
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066a2:	7afb      	ldrb	r3, [r7, #11]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d14b      	bne.n	8006740 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80066ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d134      	bne.n	8006724 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d919      	bls.n	80066fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	1ad2      	subs	r2, r2, r3
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066dc:	429a      	cmp	r2, r3
 80066de:	d203      	bcs.n	80066e8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	e002      	b.n	80066ee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 ff54 	bl	80075a0 <USBD_CtlContinueRx>
 80066f8:	e038      	b.n	800676c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800670c:	2b03      	cmp	r3, #3
 800670e:	d105      	bne.n	800671c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 ff51 	bl	80075c4 <USBD_CtlSendStatus>
 8006722:	e023      	b.n	800676c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800672a:	2b05      	cmp	r3, #5
 800672c:	d11e      	bne.n	800676c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006736:	2100      	movs	r1, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f001 fad7 	bl	8007cec <USBD_LL_StallEP>
 800673e:	e015      	b.n	800676c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00d      	beq.n	8006768 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006752:	2b03      	cmp	r3, #3
 8006754:	d108      	bne.n	8006768 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	7afa      	ldrb	r2, [r7, #11]
 8006760:	4611      	mov	r1, r2
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	4798      	blx	r3
 8006766:	e001      	b.n	800676c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006768:	2302      	movs	r3, #2
 800676a:	e000      	b.n	800676e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	460b      	mov	r3, r1
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d17f      	bne.n	800688a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3314      	adds	r3, #20
 800678e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006796:	2b02      	cmp	r3, #2
 8006798:	d15c      	bne.n	8006854 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d915      	bls.n	80067d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 febe 	bl	8007540 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067c4:	2300      	movs	r3, #0
 80067c6:	2200      	movs	r2, #0
 80067c8:	2100      	movs	r1, #0
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f001 fb39 	bl	8007e42 <USBD_LL_PrepareReceive>
 80067d0:	e04e      	b.n	8006870 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	6912      	ldr	r2, [r2, #16]
 80067da:	fbb3 f1f2 	udiv	r1, r3, r2
 80067de:	fb01 f202 	mul.w	r2, r1, r2
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d11c      	bne.n	8006822 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d316      	bcc.n	8006822 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067fe:	429a      	cmp	r2, r3
 8006800:	d20f      	bcs.n	8006822 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006802:	2200      	movs	r2, #0
 8006804:	2100      	movs	r1, #0
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fe9a 	bl	8007540 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006814:	2300      	movs	r3, #0
 8006816:	2200      	movs	r2, #0
 8006818:	2100      	movs	r1, #0
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f001 fb11 	bl	8007e42 <USBD_LL_PrepareReceive>
 8006820:	e026      	b.n	8006870 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006834:	2b03      	cmp	r3, #3
 8006836:	d105      	bne.n	8006844 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006844:	2180      	movs	r1, #128	@ 0x80
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f001 fa50 	bl	8007cec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fecc 	bl	80075ea <USBD_CtlReceiveStatus>
 8006852:	e00d      	b.n	8006870 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800685a:	2b04      	cmp	r3, #4
 800685c:	d004      	beq.n	8006868 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006864:	2b00      	cmp	r3, #0
 8006866:	d103      	bne.n	8006870 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006868:	2180      	movs	r1, #128	@ 0x80
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f001 fa3e 	bl	8007cec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006876:	2b01      	cmp	r3, #1
 8006878:	d11d      	bne.n	80068b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff fe81 	bl	8006582 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006888:	e015      	b.n	80068b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800689c:	2b03      	cmp	r3, #3
 800689e:	d108      	bne.n	80068b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	7afa      	ldrb	r2, [r7, #11]
 80068aa:	4611      	mov	r1, r2
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	4798      	blx	r3
 80068b0:	e001      	b.n	80068b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068b2:	2302      	movs	r3, #2
 80068b4:	e000      	b.n	80068b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c8:	2340      	movs	r3, #64	@ 0x40
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 f9c7 	bl	8007c62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2240      	movs	r2, #64	@ 0x40
 80068e0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068e4:	2340      	movs	r3, #64	@ 0x40
 80068e6:	2200      	movs	r2, #0
 80068e8:	2180      	movs	r1, #128	@ 0x80
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f9b9 	bl	8007c62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2240      	movs	r2, #64	@ 0x40
 80068fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6852      	ldr	r2, [r2, #4]
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	4611      	mov	r1, r2
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
  }

  return USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2204      	movs	r2, #4
 8006978:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr

08006988 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006996:	2b04      	cmp	r3, #4
 8006998:	d105      	bne.n	80069a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d10b      	bne.n	80069dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069fe:	2b40      	cmp	r3, #64	@ 0x40
 8006a00:	d005      	beq.n	8006a0e <USBD_StdDevReq+0x26>
 8006a02:	2b40      	cmp	r3, #64	@ 0x40
 8006a04:	d84f      	bhi.n	8006aa6 <USBD_StdDevReq+0xbe>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <USBD_StdDevReq+0x36>
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d14b      	bne.n	8006aa6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	4798      	blx	r3
      break;
 8006a1c:	e048      	b.n	8006ab0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	2b09      	cmp	r3, #9
 8006a24:	d839      	bhi.n	8006a9a <USBD_StdDevReq+0xb2>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <USBD_StdDevReq+0x44>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	08006a91 	.word	0x08006a91
 8006a34:	08006a9b 	.word	0x08006a9b
 8006a38:	08006a87 	.word	0x08006a87
 8006a3c:	08006a9b 	.word	0x08006a9b
 8006a40:	08006a5f 	.word	0x08006a5f
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a9b 	.word	0x08006a9b
 8006a4c:	08006a73 	.word	0x08006a73
 8006a50:	08006a69 	.word	0x08006a69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9dc 	bl	8006e14 <USBD_GetDescriptor>
          break;
 8006a5c:	e022      	b.n	8006aa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fb3f 	bl	80070e4 <USBD_SetAddress>
          break;
 8006a66:	e01d      	b.n	8006aa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fb7e 	bl	800716c <USBD_SetConfig>
          break;
 8006a70:	e018      	b.n	8006aa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc07 	bl	8007288 <USBD_GetConfig>
          break;
 8006a7a:	e013      	b.n	8006aa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fc37 	bl	80072f2 <USBD_GetStatus>
          break;
 8006a84:	e00e      	b.n	8006aa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fc65 	bl	8007358 <USBD_SetFeature>
          break;
 8006a8e:	e009      	b.n	8006aa4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fc74 	bl	8007380 <USBD_ClrFeature>
          break;
 8006a98:	e004      	b.n	8006aa4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fcc9 	bl	8007434 <USBD_CtlError>
          break;
 8006aa2:	bf00      	nop
      }
      break;
 8006aa4:	e004      	b.n	8006ab0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fcc3 	bl	8007434 <USBD_CtlError>
      break;
 8006aae:	bf00      	nop
  }

  return ret;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop

08006abc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ad2:	2b40      	cmp	r3, #64	@ 0x40
 8006ad4:	d005      	beq.n	8006ae2 <USBD_StdItfReq+0x26>
 8006ad6:	2b40      	cmp	r3, #64	@ 0x40
 8006ad8:	d82e      	bhi.n	8006b38 <USBD_StdItfReq+0x7c>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <USBD_StdItfReq+0x26>
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d12a      	bne.n	8006b38 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d81d      	bhi.n	8006b2a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	889b      	ldrh	r3, [r3, #4]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d813      	bhi.n	8006b20 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	88db      	ldrh	r3, [r3, #6]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d110      	bne.n	8006b34 <USBD_StdItfReq+0x78>
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10d      	bne.n	8006b34 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fd53 	bl	80075c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b1e:	e009      	b.n	8006b34 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc86 	bl	8007434 <USBD_CtlError>
          break;
 8006b28:	e004      	b.n	8006b34 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fc81 	bl	8007434 <USBD_CtlError>
          break;
 8006b32:	e000      	b.n	8006b36 <USBD_StdItfReq+0x7a>
          break;
 8006b34:	bf00      	nop
      }
      break;
 8006b36:	e004      	b.n	8006b42 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fc7a 	bl	8007434 <USBD_CtlError>
      break;
 8006b40:	bf00      	nop
  }

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	889b      	ldrh	r3, [r3, #4]
 8006b5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b68:	2b40      	cmp	r3, #64	@ 0x40
 8006b6a:	d007      	beq.n	8006b7c <USBD_StdEPReq+0x30>
 8006b6c:	2b40      	cmp	r3, #64	@ 0x40
 8006b6e:	f200 8146 	bhi.w	8006dfe <USBD_StdEPReq+0x2b2>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <USBD_StdEPReq+0x40>
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	f040 8141 	bne.w	8006dfe <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
      break;
 8006b8a:	e13d      	b.n	8006e08 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d10a      	bne.n	8006bae <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	e12d      	b.n	8006e0a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d007      	beq.n	8006bc6 <USBD_StdEPReq+0x7a>
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	f300 811b 	bgt.w	8006df2 <USBD_StdEPReq+0x2a6>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d072      	beq.n	8006ca6 <USBD_StdEPReq+0x15a>
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d03a      	beq.n	8006c3a <USBD_StdEPReq+0xee>
 8006bc4:	e115      	b.n	8006df2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d002      	beq.n	8006bd6 <USBD_StdEPReq+0x8a>
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d015      	beq.n	8006c00 <USBD_StdEPReq+0xb4>
 8006bd4:	e02b      	b.n	8006c2e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00c      	beq.n	8006bf6 <USBD_StdEPReq+0xaa>
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b80      	cmp	r3, #128	@ 0x80
 8006be0:	d009      	beq.n	8006bf6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f880 	bl	8007cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bec:	2180      	movs	r1, #128	@ 0x80
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 f87c 	bl	8007cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bf4:	e020      	b.n	8006c38 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc1b 	bl	8007434 <USBD_CtlError>
              break;
 8006bfe:	e01b      	b.n	8006c38 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	885b      	ldrh	r3, [r3, #2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10e      	bne.n	8006c26 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <USBD_StdEPReq+0xda>
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b80      	cmp	r3, #128	@ 0x80
 8006c12:	d008      	beq.n	8006c26 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	88db      	ldrh	r3, [r3, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f863 	bl	8007cec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fccc 	bl	80075c4 <USBD_CtlSendStatus>

              break;
 8006c2c:	e004      	b.n	8006c38 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fbff 	bl	8007434 <USBD_CtlError>
              break;
 8006c36:	bf00      	nop
          }
          break;
 8006c38:	e0e0      	b.n	8006dfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d002      	beq.n	8006c4a <USBD_StdEPReq+0xfe>
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d015      	beq.n	8006c74 <USBD_StdEPReq+0x128>
 8006c48:	e026      	b.n	8006c98 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00c      	beq.n	8006c6a <USBD_StdEPReq+0x11e>
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	2b80      	cmp	r3, #128	@ 0x80
 8006c54:	d009      	beq.n	8006c6a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f846 	bl	8007cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c60:	2180      	movs	r1, #128	@ 0x80
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f842 	bl	8007cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c68:	e01c      	b.n	8006ca4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fbe1 	bl	8007434 <USBD_CtlError>
              break;
 8006c72:	e017      	b.n	8006ca4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	885b      	ldrh	r3, [r3, #2]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d112      	bne.n	8006ca2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 f84d 	bl	8007d2a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc97 	bl	80075c4 <USBD_CtlSendStatus>
              }
              break;
 8006c96:	e004      	b.n	8006ca2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fbca 	bl	8007434 <USBD_CtlError>
              break;
 8006ca0:	e000      	b.n	8006ca4 <USBD_StdEPReq+0x158>
              break;
 8006ca2:	bf00      	nop
          }
          break;
 8006ca4:	e0aa      	b.n	8006dfc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d002      	beq.n	8006cb6 <USBD_StdEPReq+0x16a>
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d032      	beq.n	8006d1a <USBD_StdEPReq+0x1ce>
 8006cb4:	e097      	b.n	8006de6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <USBD_StdEPReq+0x180>
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b80      	cmp	r3, #128	@ 0x80
 8006cc0:	d004      	beq.n	8006ccc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fbb5 	bl	8007434 <USBD_CtlError>
                break;
 8006cca:	e091      	b.n	8006df0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da0b      	bge.n	8006cec <USBD_StdEPReq+0x1a0>
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	3310      	adds	r3, #16
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3304      	adds	r3, #4
 8006cea:	e00b      	b.n	8006d04 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	4413      	add	r3, r2
 8006d02:	3304      	adds	r3, #4
 8006d04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fbf8 	bl	8007508 <USBD_CtlSendData>
              break;
 8006d18:	e06a      	b.n	8006df0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	da11      	bge.n	8006d46 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	f003 020f 	and.w	r2, r3, #15
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	3318      	adds	r3, #24
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d117      	bne.n	8006d6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb78 	bl	8007434 <USBD_CtlError>
                  break;
 8006d44:	e054      	b.n	8006df0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	f003 020f 	and.w	r2, r3, #15
 8006d4c:	6879      	ldr	r1, [r7, #4]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	440b      	add	r3, r1
 8006d58:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d104      	bne.n	8006d6c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb65 	bl	8007434 <USBD_CtlError>
                  break;
 8006d6a:	e041      	b.n	8006df0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da0b      	bge.n	8006d8c <USBD_StdEPReq+0x240>
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	3310      	adds	r3, #16
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	4413      	add	r3, r2
 8006d88:	3304      	adds	r3, #4
 8006d8a:	e00b      	b.n	8006da4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4413      	add	r3, r2
 8006da2:	3304      	adds	r3, #4
 8006da4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <USBD_StdEPReq+0x266>
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b80      	cmp	r3, #128	@ 0x80
 8006db0:	d103      	bne.n	8006dba <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e00e      	b.n	8006dd8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 ffd2 	bl	8007d68 <USBD_LL_IsStallEP>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e002      	b.n	8006dd8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fb92 	bl	8007508 <USBD_CtlSendData>
              break;
 8006de4:	e004      	b.n	8006df0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb23 	bl	8007434 <USBD_CtlError>
              break;
 8006dee:	bf00      	nop
          }
          break;
 8006df0:	e004      	b.n	8006dfc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fb1d 	bl	8007434 <USBD_CtlError>
          break;
 8006dfa:	bf00      	nop
      }
      break;
 8006dfc:	e004      	b.n	8006e08 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fb17 	bl	8007434 <USBD_CtlError>
      break;
 8006e06:	bf00      	nop
  }

  return ret;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	2b06      	cmp	r3, #6
 8006e36:	f200 8128 	bhi.w	800708a <USBD_GetDescriptor+0x276>
 8006e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <USBD_GetDescriptor+0x2c>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e75 	.word	0x08006e75
 8006e48:	08006eb5 	.word	0x08006eb5
 8006e4c:	0800708b 	.word	0x0800708b
 8006e50:	0800708b 	.word	0x0800708b
 8006e54:	0800702b 	.word	0x0800702b
 8006e58:	08007057 	.word	0x08007057
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
      break;
 8006e72:	e112      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7c1b      	ldrb	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10d      	bne.n	8006e98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f107 0208 	add.w	r2, r7, #8
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
 8006e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	2202      	movs	r2, #2
 8006e94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e96:	e100      	b.n	800709a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	f107 0208 	add.w	r2, r7, #8
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	2202      	movs	r2, #2
 8006eb0:	701a      	strb	r2, [r3, #0]
      break;
 8006eb2:	e0f2      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	885b      	ldrh	r3, [r3, #2]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	f200 80ac 	bhi.w	8007018 <USBD_GetDescriptor+0x204>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <USBD_GetDescriptor+0xb4>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006ee1 	.word	0x08006ee1
 8006ecc:	08006f15 	.word	0x08006f15
 8006ed0:	08006f49 	.word	0x08006f49
 8006ed4:	08006f7d 	.word	0x08006f7d
 8006ed8:	08006fb1 	.word	0x08006fb1
 8006edc:	08006fe5 	.word	0x08006fe5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f02:	e091      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa94 	bl	8007434 <USBD_CtlError>
            err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
          break;
 8006f12:	e089      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	7c12      	ldrb	r2, [r2, #16]
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	4610      	mov	r0, r2
 8006f32:	4798      	blx	r3
 8006f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f36:	e077      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa7a 	bl	8007434 <USBD_CtlError>
            err++;
 8006f40:	7afb      	ldrb	r3, [r7, #11]
 8006f42:	3301      	adds	r3, #1
 8006f44:	72fb      	strb	r3, [r7, #11]
          break;
 8006f46:	e06f      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	7c12      	ldrb	r2, [r2, #16]
 8006f60:	f107 0108 	add.w	r1, r7, #8
 8006f64:	4610      	mov	r0, r2
 8006f66:	4798      	blx	r3
 8006f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f6a:	e05d      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fa60 	bl	8007434 <USBD_CtlError>
            err++;
 8006f74:	7afb      	ldrb	r3, [r7, #11]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72fb      	strb	r3, [r7, #11]
          break;
 8006f7a:	e055      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	7c12      	ldrb	r2, [r2, #16]
 8006f94:	f107 0108 	add.w	r1, r7, #8
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f9e:	e043      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa46 	bl	8007434 <USBD_CtlError>
            err++;
 8006fa8:	7afb      	ldrb	r3, [r7, #11]
 8006faa:	3301      	adds	r3, #1
 8006fac:	72fb      	strb	r3, [r7, #11]
          break;
 8006fae:	e03b      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	7c12      	ldrb	r2, [r2, #16]
 8006fc8:	f107 0108 	add.w	r1, r7, #8
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
 8006fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fd2:	e029      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa2c 	bl	8007434 <USBD_CtlError>
            err++;
 8006fdc:	7afb      	ldrb	r3, [r7, #11]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8006fe2:	e021      	b.n	8007028 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7c12      	ldrb	r2, [r2, #16]
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007006:	e00f      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa12 	bl	8007434 <USBD_CtlError>
            err++;
 8007010:	7afb      	ldrb	r3, [r7, #11]
 8007012:	3301      	adds	r3, #1
 8007014:	72fb      	strb	r3, [r7, #11]
          break;
 8007016:	e007      	b.n	8007028 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa0a 	bl	8007434 <USBD_CtlError>
          err++;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	3301      	adds	r3, #1
 8007024:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007026:	e038      	b.n	800709a <USBD_GetDescriptor+0x286>
 8007028:	e037      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	7c1b      	ldrb	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703a:	f107 0208 	add.w	r2, r7, #8
 800703e:	4610      	mov	r0, r2
 8007040:	4798      	blx	r3
 8007042:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007044:	e029      	b.n	800709a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f9f3 	bl	8007434 <USBD_CtlError>
        err++;
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	3301      	adds	r3, #1
 8007052:	72fb      	strb	r3, [r7, #11]
      break;
 8007054:	e021      	b.n	800709a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7c1b      	ldrb	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10d      	bne.n	800707a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007066:	f107 0208 	add.w	r2, r7, #8
 800706a:	4610      	mov	r0, r2
 800706c:	4798      	blx	r3
 800706e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	2207      	movs	r2, #7
 8007076:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007078:	e00f      	b.n	800709a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f9d9 	bl	8007434 <USBD_CtlError>
        err++;
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	3301      	adds	r3, #1
 8007086:	72fb      	strb	r3, [r7, #11]
      break;
 8007088:	e007      	b.n	800709a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9d1 	bl	8007434 <USBD_CtlError>
      err++;
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	3301      	adds	r3, #1
 8007096:	72fb      	strb	r3, [r7, #11]
      break;
 8007098:	bf00      	nop
  }

  if (err != 0U)
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d11c      	bne.n	80070da <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d011      	beq.n	80070ca <USBD_GetDescriptor+0x2b6>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88da      	ldrh	r2, [r3, #6]
 80070b2:	893b      	ldrh	r3, [r7, #8]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bf28      	it	cs
 80070b8:	4613      	movcs	r3, r2
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070be:	893b      	ldrh	r3, [r7, #8]
 80070c0:	461a      	mov	r2, r3
 80070c2:	68f9      	ldr	r1, [r7, #12]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa1f 	bl	8007508 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	88db      	ldrh	r3, [r3, #6]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa76 	bl	80075c4 <USBD_CtlSendStatus>
 80070d8:	e000      	b.n	80070dc <USBD_GetDescriptor+0x2c8>
    return;
 80070da:	bf00      	nop
    }
  }
}
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop

080070e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d130      	bne.n	8007158 <USBD_SetAddress+0x74>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	88db      	ldrh	r3, [r3, #6]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d12c      	bne.n	8007158 <USBD_SetAddress+0x74>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	885b      	ldrh	r3, [r3, #2]
 8007102:	2b7f      	cmp	r3, #127	@ 0x7f
 8007104:	d828      	bhi.n	8007158 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007110:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007118:	2b03      	cmp	r3, #3
 800711a:	d104      	bne.n	8007126 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f988 	bl	8007434 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007124:	e01d      	b.n	8007162 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	7bfa      	ldrb	r2, [r7, #15]
 800712a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fe43 	bl	8007dbe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fa43 	bl	80075c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714c:	e009      	b.n	8007162 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007156:	e004      	b.n	8007162 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f96a 	bl	8007434 <USBD_CtlError>
  }
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	885b      	ldrh	r3, [r3, #2]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	4b41      	ldr	r3, [pc, #260]	@ (8007284 <USBD_SetConfig+0x118>)
 800717e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007180:	4b40      	ldr	r3, [pc, #256]	@ (8007284 <USBD_SetConfig+0x118>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d904      	bls.n	8007192 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f952 	bl	8007434 <USBD_CtlError>
 8007190:	e075      	b.n	800727e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007198:	2b02      	cmp	r3, #2
 800719a:	d002      	beq.n	80071a2 <USBD_SetConfig+0x36>
 800719c:	2b03      	cmp	r3, #3
 800719e:	d023      	beq.n	80071e8 <USBD_SetConfig+0x7c>
 80071a0:	e062      	b.n	8007268 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80071a2:	4b38      	ldr	r3, [pc, #224]	@ (8007284 <USBD_SetConfig+0x118>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01a      	beq.n	80071e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80071aa:	4b36      	ldr	r3, [pc, #216]	@ (8007284 <USBD_SetConfig+0x118>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2203      	movs	r2, #3
 80071b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071bc:	4b31      	ldr	r3, [pc, #196]	@ (8007284 <USBD_SetConfig+0x118>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff f9e7 	bl	8006596 <USBD_SetClassConfig>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d104      	bne.n	80071d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f92f 	bl	8007434 <USBD_CtlError>
            return;
 80071d6:	e052      	b.n	800727e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f9f3 	bl	80075c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071de:	e04e      	b.n	800727e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9ef 	bl	80075c4 <USBD_CtlSendStatus>
        break;
 80071e6:	e04a      	b.n	800727e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80071e8:	4b26      	ldr	r3, [pc, #152]	@ (8007284 <USBD_SetConfig+0x118>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d112      	bne.n	8007216 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80071f8:	4b22      	ldr	r3, [pc, #136]	@ (8007284 <USBD_SetConfig+0x118>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007202:	4b20      	ldr	r3, [pc, #128]	@ (8007284 <USBD_SetConfig+0x118>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff f9e3 	bl	80065d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f9d8 	bl	80075c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007214:	e033      	b.n	800727e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007216:	4b1b      	ldr	r3, [pc, #108]	@ (8007284 <USBD_SetConfig+0x118>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d01d      	beq.n	8007260 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff f9d1 	bl	80065d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007232:	4b14      	ldr	r3, [pc, #80]	@ (8007284 <USBD_SetConfig+0x118>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800723c:	4b11      	ldr	r3, [pc, #68]	@ (8007284 <USBD_SetConfig+0x118>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff f9a7 	bl	8006596 <USBD_SetClassConfig>
 8007248:	4603      	mov	r3, r0
 800724a:	2b02      	cmp	r3, #2
 800724c:	d104      	bne.n	8007258 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f8ef 	bl	8007434 <USBD_CtlError>
            return;
 8007256:	e012      	b.n	800727e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f9b3 	bl	80075c4 <USBD_CtlSendStatus>
        break;
 800725e:	e00e      	b.n	800727e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f9af 	bl	80075c4 <USBD_CtlSendStatus>
        break;
 8007266:	e00a      	b.n	800727e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8e2 	bl	8007434 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007270:	4b04      	ldr	r3, [pc, #16]	@ (8007284 <USBD_SetConfig+0x118>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff f9ac 	bl	80065d4 <USBD_ClrClassConfig>
        break;
 800727c:	bf00      	nop
    }
  }
}
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000238 	.word	0x20000238

08007288 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d004      	beq.n	80072a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8c9 	bl	8007434 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072a2:	e022      	b.n	80072ea <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	dc02      	bgt.n	80072b4 <USBD_GetConfig+0x2c>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	dc03      	bgt.n	80072ba <USBD_GetConfig+0x32>
 80072b2:	e015      	b.n	80072e0 <USBD_GetConfig+0x58>
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d00b      	beq.n	80072d0 <USBD_GetConfig+0x48>
 80072b8:	e012      	b.n	80072e0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3308      	adds	r3, #8
 80072c4:	2201      	movs	r2, #1
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f91d 	bl	8007508 <USBD_CtlSendData>
        break;
 80072ce:	e00c      	b.n	80072ea <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3304      	adds	r3, #4
 80072d4:	2201      	movs	r2, #1
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f915 	bl	8007508 <USBD_CtlSendData>
        break;
 80072de:	e004      	b.n	80072ea <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8a6 	bl	8007434 <USBD_CtlError>
        break;
 80072e8:	bf00      	nop
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007302:	3b01      	subs	r3, #1
 8007304:	2b02      	cmp	r3, #2
 8007306:	d81e      	bhi.n	8007346 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d004      	beq.n	800731a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f88e 	bl	8007434 <USBD_CtlError>
        break;
 8007318:	e01a      	b.n	8007350 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	330c      	adds	r3, #12
 800733a:	2202      	movs	r2, #2
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8e2 	bl	8007508 <USBD_CtlSendData>
      break;
 8007344:	e004      	b.n	8007350 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f873 	bl	8007434 <USBD_CtlError>
      break;
 800734e:	bf00      	nop
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	885b      	ldrh	r3, [r3, #2]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d106      	bne.n	8007378 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f926 	bl	80075c4 <USBD_CtlSendStatus>
  }
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007390:	3b01      	subs	r3, #1
 8007392:	2b02      	cmp	r3, #2
 8007394:	d80b      	bhi.n	80073ae <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	885b      	ldrh	r3, [r3, #2]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d10c      	bne.n	80073b8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f90c 	bl	80075c4 <USBD_CtlSendStatus>
      }
      break;
 80073ac:	e004      	b.n	80073b8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f83f 	bl	8007434 <USBD_CtlError>
      break;
 80073b6:	e000      	b.n	80073ba <USBD_ClrFeature+0x3a>
      break;
 80073b8:	bf00      	nop
  }
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	785a      	ldrb	r2, [r3, #1]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	3302      	adds	r3, #2
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	3303      	adds	r3, #3
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	4413      	add	r3, r2
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	3304      	adds	r3, #4
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	3305      	adds	r3, #5
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	b29b      	uxth	r3, r3
 8007408:	4413      	add	r3, r2
 800740a:	b29a      	uxth	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	3306      	adds	r3, #6
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	3307      	adds	r3, #7
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	4413      	add	r3, r2
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	80da      	strh	r2, [r3, #6]

}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr

08007434 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800743e:	2180      	movs	r1, #128	@ 0x80
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fc53 	bl	8007cec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007446:	2100      	movs	r1, #0
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fc4f 	bl	8007cec <USBD_LL_StallEP>
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b086      	sub	sp, #24
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d032      	beq.n	80074d2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f834 	bl	80074da <USBD_GetLen>
 8007472:	4603      	mov	r3, r0
 8007474:	3301      	adds	r3, #1
 8007476:	b29b      	uxth	r3, r3
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	75fa      	strb	r2, [r7, #23]
 8007486:	461a      	mov	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4413      	add	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	75fa      	strb	r2, [r7, #23]
 8007498:	461a      	mov	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	2203      	movs	r2, #3
 80074a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80074a2:	e012      	b.n	80074ca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	60fa      	str	r2, [r7, #12]
 80074aa:	7dfa      	ldrb	r2, [r7, #23]
 80074ac:	1c51      	adds	r1, r2, #1
 80074ae:	75f9      	strb	r1, [r7, #23]
 80074b0:	4611      	mov	r1, r2
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	440a      	add	r2, r1
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	75fa      	strb	r2, [r7, #23]
 80074c0:	461a      	mov	r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	4413      	add	r3, r2
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e8      	bne.n	80074a4 <USBD_GetString+0x4e>
    }
  }
}
 80074d2:	bf00      	nop
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80074e6:	e005      	b.n	80074f4 <USBD_GetLen+0x1a>
  {
    len++;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	3301      	adds	r3, #1
 80074ec:	73fb      	strb	r3, [r7, #15]
    buf++;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3301      	adds	r3, #1
 80074f2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f5      	bne.n	80074e8 <USBD_GetLen+0xe>
  }

  return len;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr

08007508 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2202      	movs	r2, #2
 800751a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007524:	88fa      	ldrh	r2, [r7, #6]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	2100      	movs	r1, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fc63 	bl	8007dfc <USBD_LL_Transmit>

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	4613      	mov	r3, r2
 800754c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	2100      	movs	r1, #0
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fc51 	bl	8007dfc <USBD_LL_Transmit>

  return USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2203      	movs	r2, #3
 8007576:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800757a:	88fa      	ldrh	r2, [r7, #6]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fc56 	bl	8007e42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075ae:	88fb      	ldrh	r3, [r7, #6]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	2100      	movs	r1, #0
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fc44 	bl	8007e42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2204      	movs	r2, #4
 80075d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075d4:	2300      	movs	r3, #0
 80075d6:	2200      	movs	r2, #0
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fc0e 	bl	8007dfc <USBD_LL_Transmit>

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2205      	movs	r2, #5
 80075f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075fa:	2300      	movs	r3, #0
 80075fc:	2200      	movs	r2, #0
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fc1e 	bl	8007e42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007614:	2200      	movs	r2, #0
 8007616:	4912      	ldr	r1, [pc, #72]	@ (8007660 <MX_USB_DEVICE_Init+0x50>)
 8007618:	4812      	ldr	r0, [pc, #72]	@ (8007664 <MX_USB_DEVICE_Init+0x54>)
 800761a:	f7fe ff62 	bl	80064e2 <USBD_Init>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007624:	f7f9 f830 	bl	8000688 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007628:	490f      	ldr	r1, [pc, #60]	@ (8007668 <MX_USB_DEVICE_Init+0x58>)
 800762a:	480e      	ldr	r0, [pc, #56]	@ (8007664 <MX_USB_DEVICE_Init+0x54>)
 800762c:	f7fe ff84 	bl	8006538 <USBD_RegisterClass>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007636:	f7f9 f827 	bl	8000688 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800763a:	490c      	ldr	r1, [pc, #48]	@ (800766c <MX_USB_DEVICE_Init+0x5c>)
 800763c:	4809      	ldr	r0, [pc, #36]	@ (8007664 <MX_USB_DEVICE_Init+0x54>)
 800763e:	f7fe feb5 	bl	80063ac <USBD_CDC_RegisterInterface>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007648:	f7f9 f81e 	bl	8000688 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800764c:	4805      	ldr	r0, [pc, #20]	@ (8007664 <MX_USB_DEVICE_Init+0x54>)
 800764e:	f7fe ff8c 	bl	800656a <USBD_Start>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007658:	f7f9 f816 	bl	8000688 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800765c:	bf00      	nop
 800765e:	bd80      	pop	{r7, pc}
 8007660:	2000012c 	.word	0x2000012c
 8007664:	2000023c 	.word	0x2000023c
 8007668:	20000018 	.word	0x20000018
 800766c:	2000011c 	.word	0x2000011c

08007670 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007674:	2200      	movs	r2, #0
 8007676:	4905      	ldr	r1, [pc, #20]	@ (800768c <CDC_Init_FS+0x1c>)
 8007678:	4805      	ldr	r0, [pc, #20]	@ (8007690 <CDC_Init_FS+0x20>)
 800767a:	f7fe fead 	bl	80063d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800767e:	4905      	ldr	r1, [pc, #20]	@ (8007694 <CDC_Init_FS+0x24>)
 8007680:	4803      	ldr	r0, [pc, #12]	@ (8007690 <CDC_Init_FS+0x20>)
 8007682:	f7fe fec2 	bl	800640a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007686:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007688:	4618      	mov	r0, r3
 800768a:	bd80      	pop	{r7, pc}
 800768c:	20000900 	.word	0x20000900
 8007690:	2000023c 	.word	0x2000023c
 8007694:	20000500 	.word	0x20000500

08007698 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800769c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800769e:	4618      	mov	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr
	...

080076a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	71fb      	strb	r3, [r7, #7]
 80076b4:	4613      	mov	r3, r2
 80076b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	2b23      	cmp	r3, #35	@ 0x23
 80076bc:	d84a      	bhi.n	8007754 <CDC_Control_FS+0xac>
 80076be:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <CDC_Control_FS+0x1c>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	08007755 	.word	0x08007755
 80076c8:	08007755 	.word	0x08007755
 80076cc:	08007755 	.word	0x08007755
 80076d0:	08007755 	.word	0x08007755
 80076d4:	08007755 	.word	0x08007755
 80076d8:	08007755 	.word	0x08007755
 80076dc:	08007755 	.word	0x08007755
 80076e0:	08007755 	.word	0x08007755
 80076e4:	08007755 	.word	0x08007755
 80076e8:	08007755 	.word	0x08007755
 80076ec:	08007755 	.word	0x08007755
 80076f0:	08007755 	.word	0x08007755
 80076f4:	08007755 	.word	0x08007755
 80076f8:	08007755 	.word	0x08007755
 80076fc:	08007755 	.word	0x08007755
 8007700:	08007755 	.word	0x08007755
 8007704:	08007755 	.word	0x08007755
 8007708:	08007755 	.word	0x08007755
 800770c:	08007755 	.word	0x08007755
 8007710:	08007755 	.word	0x08007755
 8007714:	08007755 	.word	0x08007755
 8007718:	08007755 	.word	0x08007755
 800771c:	08007755 	.word	0x08007755
 8007720:	08007755 	.word	0x08007755
 8007724:	08007755 	.word	0x08007755
 8007728:	08007755 	.word	0x08007755
 800772c:	08007755 	.word	0x08007755
 8007730:	08007755 	.word	0x08007755
 8007734:	08007755 	.word	0x08007755
 8007738:	08007755 	.word	0x08007755
 800773c:	08007755 	.word	0x08007755
 8007740:	08007755 	.word	0x08007755
 8007744:	08007755 	.word	0x08007755
 8007748:	08007755 	.word	0x08007755
 800774c:	08007755 	.word	0x08007755
 8007750:	08007755 	.word	0x08007755
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007754:	bf00      	nop
  }

  return (USBD_OK);
 8007756:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop

08007764 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4805      	ldr	r0, [pc, #20]	@ (8007788 <CDC_Receive_FS+0x24>)
 8007772:	f7fe fe4a 	bl	800640a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007776:	4804      	ldr	r0, [pc, #16]	@ (8007788 <CDC_Receive_FS+0x24>)
 8007778:	f7fe fe89 	bl	800648e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800777c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	2000023c 	.word	0x2000023c

0800778c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800779c:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <CDC_Transmit_FS+0x48>)
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e00b      	b.n	80077ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80077b2:	887b      	ldrh	r3, [r7, #2]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	4806      	ldr	r0, [pc, #24]	@ (80077d4 <CDC_Transmit_FS+0x48>)
 80077ba:	f7fe fe0d 	bl	80063d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80077be:	4805      	ldr	r0, [pc, #20]	@ (80077d4 <CDC_Transmit_FS+0x48>)
 80077c0:	f7fe fe36 	bl	8006430 <USBD_CDC_TransmitPacket>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	2000023c 	.word	0x2000023c

080077d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2212      	movs	r2, #18
 80077e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077ea:	4b03      	ldr	r3, [pc, #12]	@ (80077f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	20000148 	.word	0x20000148

080077fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	6039      	str	r1, [r7, #0]
 8007806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2204      	movs	r2, #4
 800780c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800780e:	4b03      	ldr	r3, [pc, #12]	@ (800781c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	2000015c 	.word	0x2000015c

08007820 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d105      	bne.n	800783e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	4907      	ldr	r1, [pc, #28]	@ (8007854 <USBD_FS_ProductStrDescriptor+0x34>)
 8007836:	4808      	ldr	r0, [pc, #32]	@ (8007858 <USBD_FS_ProductStrDescriptor+0x38>)
 8007838:	f7ff fe0d 	bl	8007456 <USBD_GetString>
 800783c:	e004      	b.n	8007848 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4904      	ldr	r1, [pc, #16]	@ (8007854 <USBD_FS_ProductStrDescriptor+0x34>)
 8007842:	4805      	ldr	r0, [pc, #20]	@ (8007858 <USBD_FS_ProductStrDescriptor+0x38>)
 8007844:	f7ff fe07 	bl	8007456 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007848:	4b02      	ldr	r3, [pc, #8]	@ (8007854 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20000d00 	.word	0x20000d00
 8007858:	080088f8 	.word	0x080088f8

0800785c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	4904      	ldr	r1, [pc, #16]	@ (800787c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800786c:	4804      	ldr	r0, [pc, #16]	@ (8007880 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800786e:	f7ff fdf2 	bl	8007456 <USBD_GetString>
  return USBD_StrDesc;
 8007872:	4b02      	ldr	r3, [pc, #8]	@ (800787c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000d00 	.word	0x20000d00
 8007880:	08008910 	.word	0x08008910

08007884 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	221a      	movs	r2, #26
 8007894:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007896:	f000 f843 	bl	8007920 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800789a:	4b02      	ldr	r3, [pc, #8]	@ (80078a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000160 	.word	0x20000160

080078a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	6039      	str	r1, [r7, #0]
 80078b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4907      	ldr	r1, [pc, #28]	@ (80078dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80078be:	4808      	ldr	r0, [pc, #32]	@ (80078e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078c0:	f7ff fdc9 	bl	8007456 <USBD_GetString>
 80078c4:	e004      	b.n	80078d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4904      	ldr	r1, [pc, #16]	@ (80078dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ca:	4805      	ldr	r0, [pc, #20]	@ (80078e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078cc:	f7ff fdc3 	bl	8007456 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d0:	4b02      	ldr	r3, [pc, #8]	@ (80078dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000d00 	.word	0x20000d00
 80078e0:	08008924 	.word	0x08008924

080078e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4907      	ldr	r1, [pc, #28]	@ (8007918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078fa:	4808      	ldr	r0, [pc, #32]	@ (800791c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078fc:	f7ff fdab 	bl	8007456 <USBD_GetString>
 8007900:	e004      	b.n	800790c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4904      	ldr	r1, [pc, #16]	@ (8007918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007906:	4805      	ldr	r0, [pc, #20]	@ (800791c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007908:	f7ff fda5 	bl	8007456 <USBD_GetString>
  }
  return USBD_StrDesc;
 800790c:	4b02      	ldr	r3, [pc, #8]	@ (8007918 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000d00 	.word	0x20000d00
 800791c:	08008930 	.word	0x08008930

08007920 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007926:	4b0f      	ldr	r3, [pc, #60]	@ (8007964 <Get_SerialNum+0x44>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800792c:	4b0e      	ldr	r3, [pc, #56]	@ (8007968 <Get_SerialNum+0x48>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007932:	4b0e      	ldr	r3, [pc, #56]	@ (800796c <Get_SerialNum+0x4c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007946:	2208      	movs	r2, #8
 8007948:	4909      	ldr	r1, [pc, #36]	@ (8007970 <Get_SerialNum+0x50>)
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f814 	bl	8007978 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007950:	2204      	movs	r2, #4
 8007952:	4908      	ldr	r1, [pc, #32]	@ (8007974 <Get_SerialNum+0x54>)
 8007954:	68b8      	ldr	r0, [r7, #8]
 8007956:	f000 f80f 	bl	8007978 <IntToUnicode>
  }
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	1ffff7e8 	.word	0x1ffff7e8
 8007968:	1ffff7ec 	.word	0x1ffff7ec
 800796c:	1ffff7f0 	.word	0x1ffff7f0
 8007970:	20000162 	.word	0x20000162
 8007974:	20000172 	.word	0x20000172

08007978 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800798a:	2300      	movs	r3, #0
 800798c:	75fb      	strb	r3, [r7, #23]
 800798e:	e027      	b.n	80079e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	0f1b      	lsrs	r3, r3, #28
 8007994:	2b09      	cmp	r3, #9
 8007996:	d80b      	bhi.n	80079b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	0f1b      	lsrs	r3, r3, #28
 800799c:	b2da      	uxtb	r2, r3
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4619      	mov	r1, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	440b      	add	r3, r1
 80079a8:	3230      	adds	r2, #48	@ 0x30
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e00a      	b.n	80079c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	0f1b      	lsrs	r3, r3, #28
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4619      	mov	r1, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	440b      	add	r3, r1
 80079c0:	3237      	adds	r2, #55	@ 0x37
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	3301      	adds	r3, #1
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	4413      	add	r3, r2
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	3301      	adds	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
 80079e0:	7dfa      	ldrb	r2, [r7, #23]
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d3d3      	bcc.n	8007990 <IntToUnicode+0x18>
  }
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a0d      	ldr	r2, [pc, #52]	@ (8007a38 <HAL_PCD_MspInit+0x44>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d113      	bne.n	8007a2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a06:	4b0d      	ldr	r3, [pc, #52]	@ (8007a3c <HAL_PCD_MspInit+0x48>)
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a3c <HAL_PCD_MspInit+0x48>)
 8007a0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a10:	61d3      	str	r3, [r2, #28]
 8007a12:	4b0a      	ldr	r3, [pc, #40]	@ (8007a3c <HAL_PCD_MspInit+0x48>)
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2100      	movs	r1, #0
 8007a22:	2014      	movs	r0, #20
 8007a24:	f7f9 f89d 	bl	8000b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007a28:	2014      	movs	r0, #20
 8007a2a:	f7f9 f8b6 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40005c00 	.word	0x40005c00
 8007a3c:	40021000 	.word	0x40021000

08007a40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f7fe fdcf 	bl	80065fa <USBD_LL_SetupStage>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	6879      	ldr	r1, [r7, #4]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	440b      	add	r3, r1
 8007a84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f7fe fe01 	bl	8006694 <USBD_LL_DataOutStage>
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007aac:	78fa      	ldrb	r2, [r7, #3]
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	440b      	add	r3, r1
 8007aba:	3324      	adds	r3, #36	@ 0x24
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f7fe fe58 	bl	8006776 <USBD_LL_DataInStage>
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fe ff68 	bl	80069b2 <USBD_LL_SOF>
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007af2:	2301      	movs	r3, #1
 8007af4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	799b      	ldrb	r3, [r3, #6]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d001      	beq.n	8007b02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007afe:	f7f8 fdc3 	bl	8000688 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b08:	7bfa      	ldrb	r2, [r7, #15]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe ff18 	bl	8006942 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fed1 	bl	80068c0 <USBD_LL_Reset>
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe ff12 	bl	8006960 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7a9b      	ldrb	r3, [r3, #10]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b44:	4b04      	ldr	r3, [pc, #16]	@ (8007b58 <HAL_PCD_SuspendCallback+0x30>)
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	4a03      	ldr	r2, [pc, #12]	@ (8007b58 <HAL_PCD_SuspendCallback+0x30>)
 8007b4a:	f043 0306 	orr.w	r3, r3, #6
 8007b4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	e000ed00 	.word	0xe000ed00

08007b5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe ff0c 	bl	8006988 <USBD_LL_Resume>
}
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007b80:	4a28      	ldr	r2, [pc, #160]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a26      	ldr	r2, [pc, #152]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007b8c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007b90:	4b24      	ldr	r3, [pc, #144]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007b92:	4a25      	ldr	r2, [pc, #148]	@ (8007c28 <USBD_LL_Init+0xb0>)
 8007b94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b96:	4b23      	ldr	r3, [pc, #140]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007b98:	2208      	movs	r2, #8
 8007b9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b9c:	4b21      	ldr	r3, [pc, #132]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ba2:	4b20      	ldr	r3, [pc, #128]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007bae:	4b1d      	ldr	r3, [pc, #116]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007bb4:	481b      	ldr	r0, [pc, #108]	@ (8007c24 <USBD_LL_Init+0xac>)
 8007bb6:	f7f9 f9d7 	bl	8000f68 <HAL_PCD_Init>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007bc0:	f7f8 fd62 	bl	8000688 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007bca:	2318      	movs	r3, #24
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2100      	movs	r1, #0
 8007bd0:	f7fa fee8 	bl	80029a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007bda:	2358      	movs	r3, #88	@ 0x58
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2180      	movs	r1, #128	@ 0x80
 8007be0:	f7fa fee0 	bl	80029a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007bea:	23c0      	movs	r3, #192	@ 0xc0
 8007bec:	2200      	movs	r2, #0
 8007bee:	2181      	movs	r1, #129	@ 0x81
 8007bf0:	f7fa fed8 	bl	80029a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007bfa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2101      	movs	r1, #1
 8007c02:	f7fa fecf 	bl	80029a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c10:	2200      	movs	r2, #0
 8007c12:	2182      	movs	r1, #130	@ 0x82
 8007c14:	f7fa fec6 	bl	80029a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000f00 	.word	0x20000f00
 8007c28:	40005c00 	.word	0x40005c00

08007c2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7f9 fa86 	bl	8001154 <HAL_PCD_Start>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 f94e 	bl	8007ef0 <USBD_Get_USB_Status>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	461a      	mov	r2, r3
 8007c70:	4603      	mov	r3, r0
 8007c72:	70fb      	strb	r3, [r7, #3]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70bb      	strb	r3, [r7, #2]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007c8a:	78bb      	ldrb	r3, [r7, #2]
 8007c8c:	883a      	ldrh	r2, [r7, #0]
 8007c8e:	78f9      	ldrb	r1, [r7, #3]
 8007c90:	f7f9 fbda 	bl	8001448 <HAL_PCD_EP_Open>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f928 	bl	8007ef0 <USBD_Get_USB_Status>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	4611      	mov	r1, r2
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7f9 fc18 	bl	8001502 <HAL_PCD_EP_Close>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f909 	bl	8007ef0 <USBD_Get_USB_Status>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7f9 fcc0 	bl	8001690 <HAL_PCD_EP_SetStall>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f8ea 	bl	8007ef0 <USBD_Get_USB_Status>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d44:	78fa      	ldrb	r2, [r7, #3]
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7f9 fd01 	bl	8001750 <HAL_PCD_EP_ClrStall>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 f8cb 	bl	8007ef0 <USBD_Get_USB_Status>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	da0b      	bge.n	8007d9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	440b      	add	r3, r1
 8007d96:	3312      	adds	r3, #18
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	e00b      	b.n	8007db4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007da2:	68f9      	ldr	r1, [r7, #12]
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	440b      	add	r3, r1
 8007dae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8007db2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr

08007dbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7f9 fb0f 	bl	8001400 <HAL_PCD_SetAddress>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f881 	bl	8007ef0 <USBD_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	461a      	mov	r2, r3
 8007e08:	460b      	mov	r3, r1
 8007e0a:	72fb      	strb	r3, [r7, #11]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	7af9      	ldrb	r1, [r7, #11]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	f7f9 fbfd 	bl	8001622 <HAL_PCD_EP_Transmit>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f85e 	bl	8007ef0 <USBD_Get_USB_Status>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e38:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	460b      	mov	r3, r1
 8007e50:	72fb      	strb	r3, [r7, #11]
 8007e52:	4613      	mov	r3, r2
 8007e54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007e64:	893b      	ldrh	r3, [r7, #8]
 8007e66:	7af9      	ldrb	r1, [r7, #11]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	f7f9 fb92 	bl	8001592 <HAL_PCD_EP_Receive>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f83b 	bl	8007ef0 <USBD_Get_USB_Status>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007e9a:	78fa      	ldrb	r2, [r7, #3]
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f9 fba8 	bl	80015f4 <HAL_PCD_EP_GetRxCount>
 8007ea4:	4603      	mov	r3, r0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007eb8:	4b02      	ldr	r3, [pc, #8]	@ (8007ec4 <USBD_static_malloc+0x14>)
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr
 8007ec4:	200011d8 	.word	0x200011d8

08007ec8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]

}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr

08007ef0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d817      	bhi.n	8007f34 <USBD_Get_USB_Status+0x44>
 8007f04:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <USBD_Get_USB_Status+0x1c>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f23 	.word	0x08007f23
 8007f14:	08007f29 	.word	0x08007f29
 8007f18:	08007f2f 	.word	0x08007f2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f20:	e00b      	b.n	8007f3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f22:	2302      	movs	r3, #2
 8007f24:	73fb      	strb	r3, [r7, #15]
    break;
 8007f26:	e008      	b.n	8007f3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f2c:	e005      	b.n	8007f3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	73fb      	strb	r3, [r7, #15]
    break;
 8007f32:	e002      	b.n	8007f3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f34:	2302      	movs	r3, #2
 8007f36:	73fb      	strb	r3, [r7, #15]
    break;
 8007f38:	bf00      	nop
  }
  return usb_status;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop

08007f48 <sniprintf>:
 8007f48:	b40c      	push	{r2, r3}
 8007f4a:	b530      	push	{r4, r5, lr}
 8007f4c:	4b18      	ldr	r3, [pc, #96]	@ (8007fb0 <sniprintf+0x68>)
 8007f4e:	1e0c      	subs	r4, r1, #0
 8007f50:	681d      	ldr	r5, [r3, #0]
 8007f52:	b09d      	sub	sp, #116	@ 0x74
 8007f54:	da08      	bge.n	8007f68 <sniprintf+0x20>
 8007f56:	238b      	movs	r3, #139	@ 0x8b
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	602b      	str	r3, [r5, #0]
 8007f5e:	b01d      	add	sp, #116	@ 0x74
 8007f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f64:	b002      	add	sp, #8
 8007f66:	4770      	bx	lr
 8007f68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007f76:	bf0c      	ite	eq
 8007f78:	4623      	moveq	r3, r4
 8007f7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	9307      	str	r3, [sp, #28]
 8007f82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f86:	9002      	str	r0, [sp, #8]
 8007f88:	9006      	str	r0, [sp, #24]
 8007f8a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f8e:	4628      	mov	r0, r5
 8007f90:	ab21      	add	r3, sp, #132	@ 0x84
 8007f92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f94:	a902      	add	r1, sp, #8
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	f000 f992 	bl	80082c0 <_svfiprintf_r>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	bfbc      	itt	lt
 8007fa0:	238b      	movlt	r3, #139	@ 0x8b
 8007fa2:	602b      	strlt	r3, [r5, #0]
 8007fa4:	2c00      	cmp	r4, #0
 8007fa6:	d0da      	beq.n	8007f5e <sniprintf+0x16>
 8007fa8:	2200      	movs	r2, #0
 8007faa:	9b02      	ldr	r3, [sp, #8]
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	e7d6      	b.n	8007f5e <sniprintf+0x16>
 8007fb0:	2000017c 	.word	0x2000017c

08007fb4 <memset>:
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	4402      	add	r2, r0
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d100      	bne.n	8007fbe <memset+0xa>
 8007fbc:	4770      	bx	lr
 8007fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc2:	e7f9      	b.n	8007fb8 <memset+0x4>

08007fc4 <__errno>:
 8007fc4:	4b01      	ldr	r3, [pc, #4]	@ (8007fcc <__errno+0x8>)
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	2000017c 	.word	0x2000017c

08007fd0 <__libc_init_array>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	2600      	movs	r6, #0
 8007fd4:	4d0c      	ldr	r5, [pc, #48]	@ (8008008 <__libc_init_array+0x38>)
 8007fd6:	4c0d      	ldr	r4, [pc, #52]	@ (800800c <__libc_init_array+0x3c>)
 8007fd8:	1b64      	subs	r4, r4, r5
 8007fda:	10a4      	asrs	r4, r4, #2
 8007fdc:	42a6      	cmp	r6, r4
 8007fde:	d109      	bne.n	8007ff4 <__libc_init_array+0x24>
 8007fe0:	f000 fc76 	bl	80088d0 <_init>
 8007fe4:	2600      	movs	r6, #0
 8007fe6:	4d0a      	ldr	r5, [pc, #40]	@ (8008010 <__libc_init_array+0x40>)
 8007fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8008014 <__libc_init_array+0x44>)
 8007fea:	1b64      	subs	r4, r4, r5
 8007fec:	10a4      	asrs	r4, r4, #2
 8007fee:	42a6      	cmp	r6, r4
 8007ff0:	d105      	bne.n	8007ffe <__libc_init_array+0x2e>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff8:	4798      	blx	r3
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7ee      	b.n	8007fdc <__libc_init_array+0xc>
 8007ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008002:	4798      	blx	r3
 8008004:	3601      	adds	r6, #1
 8008006:	e7f2      	b.n	8007fee <__libc_init_array+0x1e>
 8008008:	080089a8 	.word	0x080089a8
 800800c:	080089a8 	.word	0x080089a8
 8008010:	080089a8 	.word	0x080089a8
 8008014:	080089ac 	.word	0x080089ac

08008018 <__retarget_lock_acquire_recursive>:
 8008018:	4770      	bx	lr

0800801a <__retarget_lock_release_recursive>:
 800801a:	4770      	bx	lr

0800801c <_free_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4605      	mov	r5, r0
 8008020:	2900      	cmp	r1, #0
 8008022:	d040      	beq.n	80080a6 <_free_r+0x8a>
 8008024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008028:	1f0c      	subs	r4, r1, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfb8      	it	lt
 800802e:	18e4      	addlt	r4, r4, r3
 8008030:	f000 f8de 	bl	80081f0 <__malloc_lock>
 8008034:	4a1c      	ldr	r2, [pc, #112]	@ (80080a8 <_free_r+0x8c>)
 8008036:	6813      	ldr	r3, [r2, #0]
 8008038:	b933      	cbnz	r3, 8008048 <_free_r+0x2c>
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	6014      	str	r4, [r2, #0]
 800803e:	4628      	mov	r0, r5
 8008040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008044:	f000 b8da 	b.w	80081fc <__malloc_unlock>
 8008048:	42a3      	cmp	r3, r4
 800804a:	d908      	bls.n	800805e <_free_r+0x42>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	1821      	adds	r1, r4, r0
 8008050:	428b      	cmp	r3, r1
 8008052:	bf01      	itttt	eq
 8008054:	6819      	ldreq	r1, [r3, #0]
 8008056:	685b      	ldreq	r3, [r3, #4]
 8008058:	1809      	addeq	r1, r1, r0
 800805a:	6021      	streq	r1, [r4, #0]
 800805c:	e7ed      	b.n	800803a <_free_r+0x1e>
 800805e:	461a      	mov	r2, r3
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	b10b      	cbz	r3, 8008068 <_free_r+0x4c>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d9fa      	bls.n	800805e <_free_r+0x42>
 8008068:	6811      	ldr	r1, [r2, #0]
 800806a:	1850      	adds	r0, r2, r1
 800806c:	42a0      	cmp	r0, r4
 800806e:	d10b      	bne.n	8008088 <_free_r+0x6c>
 8008070:	6820      	ldr	r0, [r4, #0]
 8008072:	4401      	add	r1, r0
 8008074:	1850      	adds	r0, r2, r1
 8008076:	4283      	cmp	r3, r0
 8008078:	6011      	str	r1, [r2, #0]
 800807a:	d1e0      	bne.n	800803e <_free_r+0x22>
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4408      	add	r0, r1
 8008082:	6010      	str	r0, [r2, #0]
 8008084:	6053      	str	r3, [r2, #4]
 8008086:	e7da      	b.n	800803e <_free_r+0x22>
 8008088:	d902      	bls.n	8008090 <_free_r+0x74>
 800808a:	230c      	movs	r3, #12
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	e7d6      	b.n	800803e <_free_r+0x22>
 8008090:	6820      	ldr	r0, [r4, #0]
 8008092:	1821      	adds	r1, r4, r0
 8008094:	428b      	cmp	r3, r1
 8008096:	bf01      	itttt	eq
 8008098:	6819      	ldreq	r1, [r3, #0]
 800809a:	685b      	ldreq	r3, [r3, #4]
 800809c:	1809      	addeq	r1, r1, r0
 800809e:	6021      	streq	r1, [r4, #0]
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	6054      	str	r4, [r2, #4]
 80080a4:	e7cb      	b.n	800803e <_free_r+0x22>
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	2000153c 	.word	0x2000153c

080080ac <sbrk_aligned>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4e0f      	ldr	r6, [pc, #60]	@ (80080ec <sbrk_aligned+0x40>)
 80080b0:	460c      	mov	r4, r1
 80080b2:	6831      	ldr	r1, [r6, #0]
 80080b4:	4605      	mov	r5, r0
 80080b6:	b911      	cbnz	r1, 80080be <sbrk_aligned+0x12>
 80080b8:	f000 fba8 	bl	800880c <_sbrk_r>
 80080bc:	6030      	str	r0, [r6, #0]
 80080be:	4621      	mov	r1, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 fba3 	bl	800880c <_sbrk_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d103      	bne.n	80080d2 <sbrk_aligned+0x26>
 80080ca:	f04f 34ff 	mov.w	r4, #4294967295
 80080ce:	4620      	mov	r0, r4
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
 80080d2:	1cc4      	adds	r4, r0, #3
 80080d4:	f024 0403 	bic.w	r4, r4, #3
 80080d8:	42a0      	cmp	r0, r4
 80080da:	d0f8      	beq.n	80080ce <sbrk_aligned+0x22>
 80080dc:	1a21      	subs	r1, r4, r0
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 fb94 	bl	800880c <_sbrk_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	d1f2      	bne.n	80080ce <sbrk_aligned+0x22>
 80080e8:	e7ef      	b.n	80080ca <sbrk_aligned+0x1e>
 80080ea:	bf00      	nop
 80080ec:	20001538 	.word	0x20001538

080080f0 <_malloc_r>:
 80080f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f4:	1ccd      	adds	r5, r1, #3
 80080f6:	f025 0503 	bic.w	r5, r5, #3
 80080fa:	3508      	adds	r5, #8
 80080fc:	2d0c      	cmp	r5, #12
 80080fe:	bf38      	it	cc
 8008100:	250c      	movcc	r5, #12
 8008102:	2d00      	cmp	r5, #0
 8008104:	4606      	mov	r6, r0
 8008106:	db01      	blt.n	800810c <_malloc_r+0x1c>
 8008108:	42a9      	cmp	r1, r5
 800810a:	d904      	bls.n	8008116 <_malloc_r+0x26>
 800810c:	230c      	movs	r3, #12
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	2000      	movs	r0, #0
 8008112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081ec <_malloc_r+0xfc>
 800811a:	f000 f869 	bl	80081f0 <__malloc_lock>
 800811e:	f8d8 3000 	ldr.w	r3, [r8]
 8008122:	461c      	mov	r4, r3
 8008124:	bb44      	cbnz	r4, 8008178 <_malloc_r+0x88>
 8008126:	4629      	mov	r1, r5
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff ffbf 	bl	80080ac <sbrk_aligned>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	4604      	mov	r4, r0
 8008132:	d158      	bne.n	80081e6 <_malloc_r+0xf6>
 8008134:	f8d8 4000 	ldr.w	r4, [r8]
 8008138:	4627      	mov	r7, r4
 800813a:	2f00      	cmp	r7, #0
 800813c:	d143      	bne.n	80081c6 <_malloc_r+0xd6>
 800813e:	2c00      	cmp	r4, #0
 8008140:	d04b      	beq.n	80081da <_malloc_r+0xea>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	4639      	mov	r1, r7
 8008146:	4630      	mov	r0, r6
 8008148:	eb04 0903 	add.w	r9, r4, r3
 800814c:	f000 fb5e 	bl	800880c <_sbrk_r>
 8008150:	4581      	cmp	r9, r0
 8008152:	d142      	bne.n	80081da <_malloc_r+0xea>
 8008154:	6821      	ldr	r1, [r4, #0]
 8008156:	4630      	mov	r0, r6
 8008158:	1a6d      	subs	r5, r5, r1
 800815a:	4629      	mov	r1, r5
 800815c:	f7ff ffa6 	bl	80080ac <sbrk_aligned>
 8008160:	3001      	adds	r0, #1
 8008162:	d03a      	beq.n	80081da <_malloc_r+0xea>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	442b      	add	r3, r5
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	f8d8 3000 	ldr.w	r3, [r8]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	bb62      	cbnz	r2, 80081cc <_malloc_r+0xdc>
 8008172:	f8c8 7000 	str.w	r7, [r8]
 8008176:	e00f      	b.n	8008198 <_malloc_r+0xa8>
 8008178:	6822      	ldr	r2, [r4, #0]
 800817a:	1b52      	subs	r2, r2, r5
 800817c:	d420      	bmi.n	80081c0 <_malloc_r+0xd0>
 800817e:	2a0b      	cmp	r2, #11
 8008180:	d917      	bls.n	80081b2 <_malloc_r+0xc2>
 8008182:	1961      	adds	r1, r4, r5
 8008184:	42a3      	cmp	r3, r4
 8008186:	6025      	str	r5, [r4, #0]
 8008188:	bf18      	it	ne
 800818a:	6059      	strne	r1, [r3, #4]
 800818c:	6863      	ldr	r3, [r4, #4]
 800818e:	bf08      	it	eq
 8008190:	f8c8 1000 	streq.w	r1, [r8]
 8008194:	5162      	str	r2, [r4, r5]
 8008196:	604b      	str	r3, [r1, #4]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f82f 	bl	80081fc <__malloc_unlock>
 800819e:	f104 000b 	add.w	r0, r4, #11
 80081a2:	1d23      	adds	r3, r4, #4
 80081a4:	f020 0007 	bic.w	r0, r0, #7
 80081a8:	1ac2      	subs	r2, r0, r3
 80081aa:	bf1c      	itt	ne
 80081ac:	1a1b      	subne	r3, r3, r0
 80081ae:	50a3      	strne	r3, [r4, r2]
 80081b0:	e7af      	b.n	8008112 <_malloc_r+0x22>
 80081b2:	6862      	ldr	r2, [r4, #4]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	bf0c      	ite	eq
 80081b8:	f8c8 2000 	streq.w	r2, [r8]
 80081bc:	605a      	strne	r2, [r3, #4]
 80081be:	e7eb      	b.n	8008198 <_malloc_r+0xa8>
 80081c0:	4623      	mov	r3, r4
 80081c2:	6864      	ldr	r4, [r4, #4]
 80081c4:	e7ae      	b.n	8008124 <_malloc_r+0x34>
 80081c6:	463c      	mov	r4, r7
 80081c8:	687f      	ldr	r7, [r7, #4]
 80081ca:	e7b6      	b.n	800813a <_malloc_r+0x4a>
 80081cc:	461a      	mov	r2, r3
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d1fb      	bne.n	80081cc <_malloc_r+0xdc>
 80081d4:	2300      	movs	r3, #0
 80081d6:	6053      	str	r3, [r2, #4]
 80081d8:	e7de      	b.n	8008198 <_malloc_r+0xa8>
 80081da:	230c      	movs	r3, #12
 80081dc:	4630      	mov	r0, r6
 80081de:	6033      	str	r3, [r6, #0]
 80081e0:	f000 f80c 	bl	80081fc <__malloc_unlock>
 80081e4:	e794      	b.n	8008110 <_malloc_r+0x20>
 80081e6:	6005      	str	r5, [r0, #0]
 80081e8:	e7d6      	b.n	8008198 <_malloc_r+0xa8>
 80081ea:	bf00      	nop
 80081ec:	2000153c 	.word	0x2000153c

080081f0 <__malloc_lock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	@ (80081f8 <__malloc_lock+0x8>)
 80081f2:	f7ff bf11 	b.w	8008018 <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	20001534 	.word	0x20001534

080081fc <__malloc_unlock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	@ (8008204 <__malloc_unlock+0x8>)
 80081fe:	f7ff bf0c 	b.w	800801a <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	20001534 	.word	0x20001534

08008208 <__ssputs_r>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	461f      	mov	r7, r3
 800820e:	688e      	ldr	r6, [r1, #8]
 8008210:	4682      	mov	sl, r0
 8008212:	42be      	cmp	r6, r7
 8008214:	460c      	mov	r4, r1
 8008216:	4690      	mov	r8, r2
 8008218:	680b      	ldr	r3, [r1, #0]
 800821a:	d82d      	bhi.n	8008278 <__ssputs_r+0x70>
 800821c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008220:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008224:	d026      	beq.n	8008274 <__ssputs_r+0x6c>
 8008226:	6965      	ldr	r5, [r4, #20]
 8008228:	6909      	ldr	r1, [r1, #16]
 800822a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800822e:	eba3 0901 	sub.w	r9, r3, r1
 8008232:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008236:	1c7b      	adds	r3, r7, #1
 8008238:	444b      	add	r3, r9
 800823a:	106d      	asrs	r5, r5, #1
 800823c:	429d      	cmp	r5, r3
 800823e:	bf38      	it	cc
 8008240:	461d      	movcc	r5, r3
 8008242:	0553      	lsls	r3, r2, #21
 8008244:	d527      	bpl.n	8008296 <__ssputs_r+0x8e>
 8008246:	4629      	mov	r1, r5
 8008248:	f7ff ff52 	bl	80080f0 <_malloc_r>
 800824c:	4606      	mov	r6, r0
 800824e:	b360      	cbz	r0, 80082aa <__ssputs_r+0xa2>
 8008250:	464a      	mov	r2, r9
 8008252:	6921      	ldr	r1, [r4, #16]
 8008254:	f000 faf8 	bl	8008848 <memcpy>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800825e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	6126      	str	r6, [r4, #16]
 8008266:	444e      	add	r6, r9
 8008268:	6026      	str	r6, [r4, #0]
 800826a:	463e      	mov	r6, r7
 800826c:	6165      	str	r5, [r4, #20]
 800826e:	eba5 0509 	sub.w	r5, r5, r9
 8008272:	60a5      	str	r5, [r4, #8]
 8008274:	42be      	cmp	r6, r7
 8008276:	d900      	bls.n	800827a <__ssputs_r+0x72>
 8008278:	463e      	mov	r6, r7
 800827a:	4632      	mov	r2, r6
 800827c:	4641      	mov	r1, r8
 800827e:	6820      	ldr	r0, [r4, #0]
 8008280:	f000 faaa 	bl	80087d8 <memmove>
 8008284:	2000      	movs	r0, #0
 8008286:	68a3      	ldr	r3, [r4, #8]
 8008288:	1b9b      	subs	r3, r3, r6
 800828a:	60a3      	str	r3, [r4, #8]
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	4433      	add	r3, r6
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	462a      	mov	r2, r5
 8008298:	f000 fae4 	bl	8008864 <_realloc_r>
 800829c:	4606      	mov	r6, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	d1e0      	bne.n	8008264 <__ssputs_r+0x5c>
 80082a2:	4650      	mov	r0, sl
 80082a4:	6921      	ldr	r1, [r4, #16]
 80082a6:	f7ff feb9 	bl	800801c <_free_r>
 80082aa:	230c      	movs	r3, #12
 80082ac:	f8ca 3000 	str.w	r3, [sl]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295
 80082b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	e7e9      	b.n	8008292 <__ssputs_r+0x8a>
	...

080082c0 <_svfiprintf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	4698      	mov	r8, r3
 80082c6:	898b      	ldrh	r3, [r1, #12]
 80082c8:	4607      	mov	r7, r0
 80082ca:	061b      	lsls	r3, r3, #24
 80082cc:	460d      	mov	r5, r1
 80082ce:	4614      	mov	r4, r2
 80082d0:	b09d      	sub	sp, #116	@ 0x74
 80082d2:	d510      	bpl.n	80082f6 <_svfiprintf_r+0x36>
 80082d4:	690b      	ldr	r3, [r1, #16]
 80082d6:	b973      	cbnz	r3, 80082f6 <_svfiprintf_r+0x36>
 80082d8:	2140      	movs	r1, #64	@ 0x40
 80082da:	f7ff ff09 	bl	80080f0 <_malloc_r>
 80082de:	6028      	str	r0, [r5, #0]
 80082e0:	6128      	str	r0, [r5, #16]
 80082e2:	b930      	cbnz	r0, 80082f2 <_svfiprintf_r+0x32>
 80082e4:	230c      	movs	r3, #12
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	b01d      	add	sp, #116	@ 0x74
 80082ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f2:	2340      	movs	r3, #64	@ 0x40
 80082f4:	616b      	str	r3, [r5, #20]
 80082f6:	2300      	movs	r3, #0
 80082f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fa:	2320      	movs	r3, #32
 80082fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008300:	2330      	movs	r3, #48	@ 0x30
 8008302:	f04f 0901 	mov.w	r9, #1
 8008306:	f8cd 800c 	str.w	r8, [sp, #12]
 800830a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80084a4 <_svfiprintf_r+0x1e4>
 800830e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008312:	4623      	mov	r3, r4
 8008314:	469a      	mov	sl, r3
 8008316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831a:	b10a      	cbz	r2, 8008320 <_svfiprintf_r+0x60>
 800831c:	2a25      	cmp	r2, #37	@ 0x25
 800831e:	d1f9      	bne.n	8008314 <_svfiprintf_r+0x54>
 8008320:	ebba 0b04 	subs.w	fp, sl, r4
 8008324:	d00b      	beq.n	800833e <_svfiprintf_r+0x7e>
 8008326:	465b      	mov	r3, fp
 8008328:	4622      	mov	r2, r4
 800832a:	4629      	mov	r1, r5
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ff6b 	bl	8008208 <__ssputs_r>
 8008332:	3001      	adds	r0, #1
 8008334:	f000 80a7 	beq.w	8008486 <_svfiprintf_r+0x1c6>
 8008338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833a:	445a      	add	r2, fp
 800833c:	9209      	str	r2, [sp, #36]	@ 0x24
 800833e:	f89a 3000 	ldrb.w	r3, [sl]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 809f 	beq.w	8008486 <_svfiprintf_r+0x1c6>
 8008348:	2300      	movs	r3, #0
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008352:	f10a 0a01 	add.w	sl, sl, #1
 8008356:	9304      	str	r3, [sp, #16]
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800835e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008360:	4654      	mov	r4, sl
 8008362:	2205      	movs	r2, #5
 8008364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008368:	484e      	ldr	r0, [pc, #312]	@ (80084a4 <_svfiprintf_r+0x1e4>)
 800836a:	f000 fa5f 	bl	800882c <memchr>
 800836e:	9a04      	ldr	r2, [sp, #16]
 8008370:	b9d8      	cbnz	r0, 80083aa <_svfiprintf_r+0xea>
 8008372:	06d0      	lsls	r0, r2, #27
 8008374:	bf44      	itt	mi
 8008376:	2320      	movmi	r3, #32
 8008378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837c:	0711      	lsls	r1, r2, #28
 800837e:	bf44      	itt	mi
 8008380:	232b      	movmi	r3, #43	@ 0x2b
 8008382:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008386:	f89a 3000 	ldrb.w	r3, [sl]
 800838a:	2b2a      	cmp	r3, #42	@ 0x2a
 800838c:	d015      	beq.n	80083ba <_svfiprintf_r+0xfa>
 800838e:	4654      	mov	r4, sl
 8008390:	2000      	movs	r0, #0
 8008392:	f04f 0c0a 	mov.w	ip, #10
 8008396:	9a07      	ldr	r2, [sp, #28]
 8008398:	4621      	mov	r1, r4
 800839a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839e:	3b30      	subs	r3, #48	@ 0x30
 80083a0:	2b09      	cmp	r3, #9
 80083a2:	d94b      	bls.n	800843c <_svfiprintf_r+0x17c>
 80083a4:	b1b0      	cbz	r0, 80083d4 <_svfiprintf_r+0x114>
 80083a6:	9207      	str	r2, [sp, #28]
 80083a8:	e014      	b.n	80083d4 <_svfiprintf_r+0x114>
 80083aa:	eba0 0308 	sub.w	r3, r0, r8
 80083ae:	fa09 f303 	lsl.w	r3, r9, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	46a2      	mov	sl, r4
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	e7d2      	b.n	8008360 <_svfiprintf_r+0xa0>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	1d19      	adds	r1, r3, #4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	9103      	str	r1, [sp, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bfbb      	ittet	lt
 80083c6:	425b      	neglt	r3, r3
 80083c8:	f042 0202 	orrlt.w	r2, r2, #2
 80083cc:	9307      	strge	r3, [sp, #28]
 80083ce:	9307      	strlt	r3, [sp, #28]
 80083d0:	bfb8      	it	lt
 80083d2:	9204      	strlt	r2, [sp, #16]
 80083d4:	7823      	ldrb	r3, [r4, #0]
 80083d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80083d8:	d10a      	bne.n	80083f0 <_svfiprintf_r+0x130>
 80083da:	7863      	ldrb	r3, [r4, #1]
 80083dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80083de:	d132      	bne.n	8008446 <_svfiprintf_r+0x186>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	3402      	adds	r4, #2
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	9203      	str	r2, [sp, #12]
 80083ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80084a8 <_svfiprintf_r+0x1e8>
 80083f4:	2203      	movs	r2, #3
 80083f6:	4650      	mov	r0, sl
 80083f8:	7821      	ldrb	r1, [r4, #0]
 80083fa:	f000 fa17 	bl	800882c <memchr>
 80083fe:	b138      	cbz	r0, 8008410 <_svfiprintf_r+0x150>
 8008400:	2240      	movs	r2, #64	@ 0x40
 8008402:	9b04      	ldr	r3, [sp, #16]
 8008404:	eba0 000a 	sub.w	r0, r0, sl
 8008408:	4082      	lsls	r2, r0
 800840a:	4313      	orrs	r3, r2
 800840c:	3401      	adds	r4, #1
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008414:	2206      	movs	r2, #6
 8008416:	4825      	ldr	r0, [pc, #148]	@ (80084ac <_svfiprintf_r+0x1ec>)
 8008418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800841c:	f000 fa06 	bl	800882c <memchr>
 8008420:	2800      	cmp	r0, #0
 8008422:	d036      	beq.n	8008492 <_svfiprintf_r+0x1d2>
 8008424:	4b22      	ldr	r3, [pc, #136]	@ (80084b0 <_svfiprintf_r+0x1f0>)
 8008426:	bb1b      	cbnz	r3, 8008470 <_svfiprintf_r+0x1b0>
 8008428:	9b03      	ldr	r3, [sp, #12]
 800842a:	3307      	adds	r3, #7
 800842c:	f023 0307 	bic.w	r3, r3, #7
 8008430:	3308      	adds	r3, #8
 8008432:	9303      	str	r3, [sp, #12]
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	4433      	add	r3, r6
 8008438:	9309      	str	r3, [sp, #36]	@ 0x24
 800843a:	e76a      	b.n	8008312 <_svfiprintf_r+0x52>
 800843c:	460c      	mov	r4, r1
 800843e:	2001      	movs	r0, #1
 8008440:	fb0c 3202 	mla	r2, ip, r2, r3
 8008444:	e7a8      	b.n	8008398 <_svfiprintf_r+0xd8>
 8008446:	2300      	movs	r3, #0
 8008448:	f04f 0c0a 	mov.w	ip, #10
 800844c:	4619      	mov	r1, r3
 800844e:	3401      	adds	r4, #1
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	4620      	mov	r0, r4
 8008454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008458:	3a30      	subs	r2, #48	@ 0x30
 800845a:	2a09      	cmp	r2, #9
 800845c:	d903      	bls.n	8008466 <_svfiprintf_r+0x1a6>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0c6      	beq.n	80083f0 <_svfiprintf_r+0x130>
 8008462:	9105      	str	r1, [sp, #20]
 8008464:	e7c4      	b.n	80083f0 <_svfiprintf_r+0x130>
 8008466:	4604      	mov	r4, r0
 8008468:	2301      	movs	r3, #1
 800846a:	fb0c 2101 	mla	r1, ip, r1, r2
 800846e:	e7f0      	b.n	8008452 <_svfiprintf_r+0x192>
 8008470:	ab03      	add	r3, sp, #12
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	462a      	mov	r2, r5
 8008476:	4638      	mov	r0, r7
 8008478:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <_svfiprintf_r+0x1f4>)
 800847a:	a904      	add	r1, sp, #16
 800847c:	f3af 8000 	nop.w
 8008480:	1c42      	adds	r2, r0, #1
 8008482:	4606      	mov	r6, r0
 8008484:	d1d6      	bne.n	8008434 <_svfiprintf_r+0x174>
 8008486:	89ab      	ldrh	r3, [r5, #12]
 8008488:	065b      	lsls	r3, r3, #25
 800848a:	f53f af2d 	bmi.w	80082e8 <_svfiprintf_r+0x28>
 800848e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008490:	e72c      	b.n	80082ec <_svfiprintf_r+0x2c>
 8008492:	ab03      	add	r3, sp, #12
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	462a      	mov	r2, r5
 8008498:	4638      	mov	r0, r7
 800849a:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <_svfiprintf_r+0x1f4>)
 800849c:	a904      	add	r1, sp, #16
 800849e:	f000 f87d 	bl	800859c <_printf_i>
 80084a2:	e7ed      	b.n	8008480 <_svfiprintf_r+0x1c0>
 80084a4:	0800896a 	.word	0x0800896a
 80084a8:	08008970 	.word	0x08008970
 80084ac:	08008974 	.word	0x08008974
 80084b0:	00000000 	.word	0x00000000
 80084b4:	08008209 	.word	0x08008209

080084b8 <_printf_common>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	4616      	mov	r6, r2
 80084be:	4698      	mov	r8, r3
 80084c0:	688a      	ldr	r2, [r1, #8]
 80084c2:	690b      	ldr	r3, [r1, #16]
 80084c4:	4607      	mov	r7, r0
 80084c6:	4293      	cmp	r3, r2
 80084c8:	bfb8      	it	lt
 80084ca:	4613      	movlt	r3, r2
 80084cc:	6033      	str	r3, [r6, #0]
 80084ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084d2:	460c      	mov	r4, r1
 80084d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084d8:	b10a      	cbz	r2, 80084de <_printf_common+0x26>
 80084da:	3301      	adds	r3, #1
 80084dc:	6033      	str	r3, [r6, #0]
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	0699      	lsls	r1, r3, #26
 80084e2:	bf42      	ittt	mi
 80084e4:	6833      	ldrmi	r3, [r6, #0]
 80084e6:	3302      	addmi	r3, #2
 80084e8:	6033      	strmi	r3, [r6, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	f015 0506 	ands.w	r5, r5, #6
 80084f0:	d106      	bne.n	8008500 <_printf_common+0x48>
 80084f2:	f104 0a19 	add.w	sl, r4, #25
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	6832      	ldr	r2, [r6, #0]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	42ab      	cmp	r3, r5
 80084fe:	dc2b      	bgt.n	8008558 <_printf_common+0xa0>
 8008500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	3b00      	subs	r3, #0
 8008508:	bf18      	it	ne
 800850a:	2301      	movne	r3, #1
 800850c:	0692      	lsls	r2, r2, #26
 800850e:	d430      	bmi.n	8008572 <_printf_common+0xba>
 8008510:	4641      	mov	r1, r8
 8008512:	4638      	mov	r0, r7
 8008514:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008518:	47c8      	blx	r9
 800851a:	3001      	adds	r0, #1
 800851c:	d023      	beq.n	8008566 <_printf_common+0xae>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	6922      	ldr	r2, [r4, #16]
 8008522:	f003 0306 	and.w	r3, r3, #6
 8008526:	2b04      	cmp	r3, #4
 8008528:	bf14      	ite	ne
 800852a:	2500      	movne	r5, #0
 800852c:	6833      	ldreq	r3, [r6, #0]
 800852e:	f04f 0600 	mov.w	r6, #0
 8008532:	bf08      	it	eq
 8008534:	68e5      	ldreq	r5, [r4, #12]
 8008536:	f104 041a 	add.w	r4, r4, #26
 800853a:	bf08      	it	eq
 800853c:	1aed      	subeq	r5, r5, r3
 800853e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008542:	bf08      	it	eq
 8008544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008548:	4293      	cmp	r3, r2
 800854a:	bfc4      	itt	gt
 800854c:	1a9b      	subgt	r3, r3, r2
 800854e:	18ed      	addgt	r5, r5, r3
 8008550:	42b5      	cmp	r5, r6
 8008552:	d11a      	bne.n	800858a <_printf_common+0xd2>
 8008554:	2000      	movs	r0, #0
 8008556:	e008      	b.n	800856a <_printf_common+0xb2>
 8008558:	2301      	movs	r3, #1
 800855a:	4652      	mov	r2, sl
 800855c:	4641      	mov	r1, r8
 800855e:	4638      	mov	r0, r7
 8008560:	47c8      	blx	r9
 8008562:	3001      	adds	r0, #1
 8008564:	d103      	bne.n	800856e <_printf_common+0xb6>
 8008566:	f04f 30ff 	mov.w	r0, #4294967295
 800856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856e:	3501      	adds	r5, #1
 8008570:	e7c1      	b.n	80084f6 <_printf_common+0x3e>
 8008572:	2030      	movs	r0, #48	@ 0x30
 8008574:	18e1      	adds	r1, r4, r3
 8008576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008580:	4422      	add	r2, r4
 8008582:	3302      	adds	r3, #2
 8008584:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008588:	e7c2      	b.n	8008510 <_printf_common+0x58>
 800858a:	2301      	movs	r3, #1
 800858c:	4622      	mov	r2, r4
 800858e:	4641      	mov	r1, r8
 8008590:	4638      	mov	r0, r7
 8008592:	47c8      	blx	r9
 8008594:	3001      	adds	r0, #1
 8008596:	d0e6      	beq.n	8008566 <_printf_common+0xae>
 8008598:	3601      	adds	r6, #1
 800859a:	e7d9      	b.n	8008550 <_printf_common+0x98>

0800859c <_printf_i>:
 800859c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	7e0f      	ldrb	r7, [r1, #24]
 80085a2:	4691      	mov	r9, r2
 80085a4:	2f78      	cmp	r7, #120	@ 0x78
 80085a6:	4680      	mov	r8, r0
 80085a8:	460c      	mov	r4, r1
 80085aa:	469a      	mov	sl, r3
 80085ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085b2:	d807      	bhi.n	80085c4 <_printf_i+0x28>
 80085b4:	2f62      	cmp	r7, #98	@ 0x62
 80085b6:	d80a      	bhi.n	80085ce <_printf_i+0x32>
 80085b8:	2f00      	cmp	r7, #0
 80085ba:	f000 80d1 	beq.w	8008760 <_printf_i+0x1c4>
 80085be:	2f58      	cmp	r7, #88	@ 0x58
 80085c0:	f000 80b8 	beq.w	8008734 <_printf_i+0x198>
 80085c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085cc:	e03a      	b.n	8008644 <_printf_i+0xa8>
 80085ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085d2:	2b15      	cmp	r3, #21
 80085d4:	d8f6      	bhi.n	80085c4 <_printf_i+0x28>
 80085d6:	a101      	add	r1, pc, #4	@ (adr r1, 80085dc <_printf_i+0x40>)
 80085d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085dc:	08008635 	.word	0x08008635
 80085e0:	08008649 	.word	0x08008649
 80085e4:	080085c5 	.word	0x080085c5
 80085e8:	080085c5 	.word	0x080085c5
 80085ec:	080085c5 	.word	0x080085c5
 80085f0:	080085c5 	.word	0x080085c5
 80085f4:	08008649 	.word	0x08008649
 80085f8:	080085c5 	.word	0x080085c5
 80085fc:	080085c5 	.word	0x080085c5
 8008600:	080085c5 	.word	0x080085c5
 8008604:	080085c5 	.word	0x080085c5
 8008608:	08008747 	.word	0x08008747
 800860c:	08008673 	.word	0x08008673
 8008610:	08008701 	.word	0x08008701
 8008614:	080085c5 	.word	0x080085c5
 8008618:	080085c5 	.word	0x080085c5
 800861c:	08008769 	.word	0x08008769
 8008620:	080085c5 	.word	0x080085c5
 8008624:	08008673 	.word	0x08008673
 8008628:	080085c5 	.word	0x080085c5
 800862c:	080085c5 	.word	0x080085c5
 8008630:	08008709 	.word	0x08008709
 8008634:	6833      	ldr	r3, [r6, #0]
 8008636:	1d1a      	adds	r2, r3, #4
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6032      	str	r2, [r6, #0]
 800863c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008644:	2301      	movs	r3, #1
 8008646:	e09c      	b.n	8008782 <_printf_i+0x1e6>
 8008648:	6833      	ldr	r3, [r6, #0]
 800864a:	6820      	ldr	r0, [r4, #0]
 800864c:	1d19      	adds	r1, r3, #4
 800864e:	6031      	str	r1, [r6, #0]
 8008650:	0606      	lsls	r6, r0, #24
 8008652:	d501      	bpl.n	8008658 <_printf_i+0xbc>
 8008654:	681d      	ldr	r5, [r3, #0]
 8008656:	e003      	b.n	8008660 <_printf_i+0xc4>
 8008658:	0645      	lsls	r5, r0, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0xb8>
 800865c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008660:	2d00      	cmp	r5, #0
 8008662:	da03      	bge.n	800866c <_printf_i+0xd0>
 8008664:	232d      	movs	r3, #45	@ 0x2d
 8008666:	426d      	negs	r5, r5
 8008668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800866c:	230a      	movs	r3, #10
 800866e:	4858      	ldr	r0, [pc, #352]	@ (80087d0 <_printf_i+0x234>)
 8008670:	e011      	b.n	8008696 <_printf_i+0xfa>
 8008672:	6821      	ldr	r1, [r4, #0]
 8008674:	6833      	ldr	r3, [r6, #0]
 8008676:	0608      	lsls	r0, r1, #24
 8008678:	f853 5b04 	ldr.w	r5, [r3], #4
 800867c:	d402      	bmi.n	8008684 <_printf_i+0xe8>
 800867e:	0649      	lsls	r1, r1, #25
 8008680:	bf48      	it	mi
 8008682:	b2ad      	uxthmi	r5, r5
 8008684:	2f6f      	cmp	r7, #111	@ 0x6f
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	bf14      	ite	ne
 800868a:	230a      	movne	r3, #10
 800868c:	2308      	moveq	r3, #8
 800868e:	4850      	ldr	r0, [pc, #320]	@ (80087d0 <_printf_i+0x234>)
 8008690:	2100      	movs	r1, #0
 8008692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008696:	6866      	ldr	r6, [r4, #4]
 8008698:	2e00      	cmp	r6, #0
 800869a:	60a6      	str	r6, [r4, #8]
 800869c:	db05      	blt.n	80086aa <_printf_i+0x10e>
 800869e:	6821      	ldr	r1, [r4, #0]
 80086a0:	432e      	orrs	r6, r5
 80086a2:	f021 0104 	bic.w	r1, r1, #4
 80086a6:	6021      	str	r1, [r4, #0]
 80086a8:	d04b      	beq.n	8008742 <_printf_i+0x1a6>
 80086aa:	4616      	mov	r6, r2
 80086ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80086b0:	fb03 5711 	mls	r7, r3, r1, r5
 80086b4:	5dc7      	ldrb	r7, [r0, r7]
 80086b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086ba:	462f      	mov	r7, r5
 80086bc:	42bb      	cmp	r3, r7
 80086be:	460d      	mov	r5, r1
 80086c0:	d9f4      	bls.n	80086ac <_printf_i+0x110>
 80086c2:	2b08      	cmp	r3, #8
 80086c4:	d10b      	bne.n	80086de <_printf_i+0x142>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	07df      	lsls	r7, r3, #31
 80086ca:	d508      	bpl.n	80086de <_printf_i+0x142>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	6861      	ldr	r1, [r4, #4]
 80086d0:	4299      	cmp	r1, r3
 80086d2:	bfde      	ittt	le
 80086d4:	2330      	movle	r3, #48	@ 0x30
 80086d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086de:	1b92      	subs	r2, r2, r6
 80086e0:	6122      	str	r2, [r4, #16]
 80086e2:	464b      	mov	r3, r9
 80086e4:	4621      	mov	r1, r4
 80086e6:	4640      	mov	r0, r8
 80086e8:	f8cd a000 	str.w	sl, [sp]
 80086ec:	aa03      	add	r2, sp, #12
 80086ee:	f7ff fee3 	bl	80084b8 <_printf_common>
 80086f2:	3001      	adds	r0, #1
 80086f4:	d14a      	bne.n	800878c <_printf_i+0x1f0>
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
 80086fa:	b004      	add	sp, #16
 80086fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	f043 0320 	orr.w	r3, r3, #32
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	2778      	movs	r7, #120	@ 0x78
 800870a:	4832      	ldr	r0, [pc, #200]	@ (80087d4 <_printf_i+0x238>)
 800870c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	6831      	ldr	r1, [r6, #0]
 8008714:	061f      	lsls	r7, r3, #24
 8008716:	f851 5b04 	ldr.w	r5, [r1], #4
 800871a:	d402      	bmi.n	8008722 <_printf_i+0x186>
 800871c:	065f      	lsls	r7, r3, #25
 800871e:	bf48      	it	mi
 8008720:	b2ad      	uxthmi	r5, r5
 8008722:	6031      	str	r1, [r6, #0]
 8008724:	07d9      	lsls	r1, r3, #31
 8008726:	bf44      	itt	mi
 8008728:	f043 0320 	orrmi.w	r3, r3, #32
 800872c:	6023      	strmi	r3, [r4, #0]
 800872e:	b11d      	cbz	r5, 8008738 <_printf_i+0x19c>
 8008730:	2310      	movs	r3, #16
 8008732:	e7ad      	b.n	8008690 <_printf_i+0xf4>
 8008734:	4826      	ldr	r0, [pc, #152]	@ (80087d0 <_printf_i+0x234>)
 8008736:	e7e9      	b.n	800870c <_printf_i+0x170>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	f023 0320 	bic.w	r3, r3, #32
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	e7f6      	b.n	8008730 <_printf_i+0x194>
 8008742:	4616      	mov	r6, r2
 8008744:	e7bd      	b.n	80086c2 <_printf_i+0x126>
 8008746:	6833      	ldr	r3, [r6, #0]
 8008748:	6825      	ldr	r5, [r4, #0]
 800874a:	1d18      	adds	r0, r3, #4
 800874c:	6961      	ldr	r1, [r4, #20]
 800874e:	6030      	str	r0, [r6, #0]
 8008750:	062e      	lsls	r6, r5, #24
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	d501      	bpl.n	800875a <_printf_i+0x1be>
 8008756:	6019      	str	r1, [r3, #0]
 8008758:	e002      	b.n	8008760 <_printf_i+0x1c4>
 800875a:	0668      	lsls	r0, r5, #25
 800875c:	d5fb      	bpl.n	8008756 <_printf_i+0x1ba>
 800875e:	8019      	strh	r1, [r3, #0]
 8008760:	2300      	movs	r3, #0
 8008762:	4616      	mov	r6, r2
 8008764:	6123      	str	r3, [r4, #16]
 8008766:	e7bc      	b.n	80086e2 <_printf_i+0x146>
 8008768:	6833      	ldr	r3, [r6, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	6032      	str	r2, [r6, #0]
 8008770:	681e      	ldr	r6, [r3, #0]
 8008772:	6862      	ldr	r2, [r4, #4]
 8008774:	4630      	mov	r0, r6
 8008776:	f000 f859 	bl	800882c <memchr>
 800877a:	b108      	cbz	r0, 8008780 <_printf_i+0x1e4>
 800877c:	1b80      	subs	r0, r0, r6
 800877e:	6060      	str	r0, [r4, #4]
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	2300      	movs	r3, #0
 8008786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800878a:	e7aa      	b.n	80086e2 <_printf_i+0x146>
 800878c:	4632      	mov	r2, r6
 800878e:	4649      	mov	r1, r9
 8008790:	4640      	mov	r0, r8
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	47d0      	blx	sl
 8008796:	3001      	adds	r0, #1
 8008798:	d0ad      	beq.n	80086f6 <_printf_i+0x15a>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	079b      	lsls	r3, r3, #30
 800879e:	d413      	bmi.n	80087c8 <_printf_i+0x22c>
 80087a0:	68e0      	ldr	r0, [r4, #12]
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	4298      	cmp	r0, r3
 80087a6:	bfb8      	it	lt
 80087a8:	4618      	movlt	r0, r3
 80087aa:	e7a6      	b.n	80086fa <_printf_i+0x15e>
 80087ac:	2301      	movs	r3, #1
 80087ae:	4632      	mov	r2, r6
 80087b0:	4649      	mov	r1, r9
 80087b2:	4640      	mov	r0, r8
 80087b4:	47d0      	blx	sl
 80087b6:	3001      	adds	r0, #1
 80087b8:	d09d      	beq.n	80086f6 <_printf_i+0x15a>
 80087ba:	3501      	adds	r5, #1
 80087bc:	68e3      	ldr	r3, [r4, #12]
 80087be:	9903      	ldr	r1, [sp, #12]
 80087c0:	1a5b      	subs	r3, r3, r1
 80087c2:	42ab      	cmp	r3, r5
 80087c4:	dcf2      	bgt.n	80087ac <_printf_i+0x210>
 80087c6:	e7eb      	b.n	80087a0 <_printf_i+0x204>
 80087c8:	2500      	movs	r5, #0
 80087ca:	f104 0619 	add.w	r6, r4, #25
 80087ce:	e7f5      	b.n	80087bc <_printf_i+0x220>
 80087d0:	0800897b 	.word	0x0800897b
 80087d4:	0800898c 	.word	0x0800898c

080087d8 <memmove>:
 80087d8:	4288      	cmp	r0, r1
 80087da:	b510      	push	{r4, lr}
 80087dc:	eb01 0402 	add.w	r4, r1, r2
 80087e0:	d902      	bls.n	80087e8 <memmove+0x10>
 80087e2:	4284      	cmp	r4, r0
 80087e4:	4623      	mov	r3, r4
 80087e6:	d807      	bhi.n	80087f8 <memmove+0x20>
 80087e8:	1e43      	subs	r3, r0, #1
 80087ea:	42a1      	cmp	r1, r4
 80087ec:	d008      	beq.n	8008800 <memmove+0x28>
 80087ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087f6:	e7f8      	b.n	80087ea <memmove+0x12>
 80087f8:	4601      	mov	r1, r0
 80087fa:	4402      	add	r2, r0
 80087fc:	428a      	cmp	r2, r1
 80087fe:	d100      	bne.n	8008802 <memmove+0x2a>
 8008800:	bd10      	pop	{r4, pc}
 8008802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800880a:	e7f7      	b.n	80087fc <memmove+0x24>

0800880c <_sbrk_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	2300      	movs	r3, #0
 8008810:	4d05      	ldr	r5, [pc, #20]	@ (8008828 <_sbrk_r+0x1c>)
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	602b      	str	r3, [r5, #0]
 8008818:	f7f7 ffe4 	bl	80007e4 <_sbrk>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_sbrk_r+0x1a>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_sbrk_r+0x1a>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	20001530 	.word	0x20001530

0800882c <memchr>:
 800882c:	4603      	mov	r3, r0
 800882e:	b510      	push	{r4, lr}
 8008830:	b2c9      	uxtb	r1, r1
 8008832:	4402      	add	r2, r0
 8008834:	4293      	cmp	r3, r2
 8008836:	4618      	mov	r0, r3
 8008838:	d101      	bne.n	800883e <memchr+0x12>
 800883a:	2000      	movs	r0, #0
 800883c:	e003      	b.n	8008846 <memchr+0x1a>
 800883e:	7804      	ldrb	r4, [r0, #0]
 8008840:	3301      	adds	r3, #1
 8008842:	428c      	cmp	r4, r1
 8008844:	d1f6      	bne.n	8008834 <memchr+0x8>
 8008846:	bd10      	pop	{r4, pc}

08008848 <memcpy>:
 8008848:	440a      	add	r2, r1
 800884a:	4291      	cmp	r1, r2
 800884c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008850:	d100      	bne.n	8008854 <memcpy+0xc>
 8008852:	4770      	bx	lr
 8008854:	b510      	push	{r4, lr}
 8008856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800885a:	4291      	cmp	r1, r2
 800885c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008860:	d1f9      	bne.n	8008856 <memcpy+0xe>
 8008862:	bd10      	pop	{r4, pc}

08008864 <_realloc_r>:
 8008864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008868:	4607      	mov	r7, r0
 800886a:	4614      	mov	r4, r2
 800886c:	460d      	mov	r5, r1
 800886e:	b921      	cbnz	r1, 800887a <_realloc_r+0x16>
 8008870:	4611      	mov	r1, r2
 8008872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008876:	f7ff bc3b 	b.w	80080f0 <_malloc_r>
 800887a:	b92a      	cbnz	r2, 8008888 <_realloc_r+0x24>
 800887c:	f7ff fbce 	bl	800801c <_free_r>
 8008880:	4625      	mov	r5, r4
 8008882:	4628      	mov	r0, r5
 8008884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008888:	f000 f81a 	bl	80088c0 <_malloc_usable_size_r>
 800888c:	4284      	cmp	r4, r0
 800888e:	4606      	mov	r6, r0
 8008890:	d802      	bhi.n	8008898 <_realloc_r+0x34>
 8008892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008896:	d8f4      	bhi.n	8008882 <_realloc_r+0x1e>
 8008898:	4621      	mov	r1, r4
 800889a:	4638      	mov	r0, r7
 800889c:	f7ff fc28 	bl	80080f0 <_malloc_r>
 80088a0:	4680      	mov	r8, r0
 80088a2:	b908      	cbnz	r0, 80088a8 <_realloc_r+0x44>
 80088a4:	4645      	mov	r5, r8
 80088a6:	e7ec      	b.n	8008882 <_realloc_r+0x1e>
 80088a8:	42b4      	cmp	r4, r6
 80088aa:	4622      	mov	r2, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	bf28      	it	cs
 80088b0:	4632      	movcs	r2, r6
 80088b2:	f7ff ffc9 	bl	8008848 <memcpy>
 80088b6:	4629      	mov	r1, r5
 80088b8:	4638      	mov	r0, r7
 80088ba:	f7ff fbaf 	bl	800801c <_free_r>
 80088be:	e7f1      	b.n	80088a4 <_realloc_r+0x40>

080088c0 <_malloc_usable_size_r>:
 80088c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c4:	1f18      	subs	r0, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bfbc      	itt	lt
 80088ca:	580b      	ldrlt	r3, [r1, r0]
 80088cc:	18c0      	addlt	r0, r0, r3
 80088ce:	4770      	bx	lr

080088d0 <_init>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	bf00      	nop
 80088d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d6:	bc08      	pop	{r3}
 80088d8:	469e      	mov	lr, r3
 80088da:	4770      	bx	lr

080088dc <_fini>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	bf00      	nop
 80088e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e2:	bc08      	pop	{r3}
 80088e4:	469e      	mov	lr, r3
 80088e6:	4770      	bx	lr
